<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetLastDatabaseBackup">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@ServerName [NVARCHAR](128)
			;

			SET @ServerName = CONVERT([NVARCHAR](128), SERVERPROPERTY(N'Servername'));

			DECLARE
				@tblBackupResults TABLE
				(
					 [DatabaseName]                   [NVARCHAR](128)
					,[DatabaseStatus]                 [NVARCHAR](128)
					,[DatabaseUpdateability]          [NVARCHAR](128)
					,[S_DatabaseBackupDateTime]       [DATETIME]
					,[S_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[S_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[S_DatabaseBackupStatus]         [INTEGER]
					,[D_DatabaseBackupDateTime]       [DATETIME]
					,[D_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[D_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[D_DatabaseBackupStatus]         [INTEGER]
					,[I_DatabaseBackupDateTime]       [DATETIME]
					,[I_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[I_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[I_DatabaseBackupStatus]         [INTEGER]
					,[L_DatabaseBackupDateTime]       [DATETIME]
					,[L_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[L_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[L_DatabaseBackupStatus]         [INTEGER]
				);

			INSERT INTO @tblBackupResults
			(
				 [DatabaseName]
				,[DatabaseStatus]
				,[DatabaseUpdateability]
				,[S_DatabaseBackupDateTime]
				,[S_DatabaseBackupSize]
				,[S_DatabaseCompressedBackupSize]
				,[S_DatabaseBackupStatus]
				,[D_DatabaseBackupDateTime]
				,[D_DatabaseBackupSize]
				,[D_DatabaseCompressedBackupSize]
				,[D_DatabaseBackupStatus]
				,[I_DatabaseBackupDateTime]
				,[I_DatabaseBackupSize]
				,[I_DatabaseCompressedBackupSize]
				,[I_DatabaseBackupStatus]
				,[L_DatabaseBackupDateTime]
				,[L_DatabaseBackupSize]
				,[L_DatabaseCompressedBackupSize]
				,[L_DatabaseBackupStatus]
			)
			SELECT
				 tSD.[name]                                                                                                            AS [DatabaseName]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Status'))                                                   AS [DatabaseStatus]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Updateability'))                                            AS [DatabaseUpdateability]

				,NULL                                                                                                                  AS [S_DatabaseBackupDateTime]
				,NULL                                                                                                                  AS [S_DatabaseBackupSize]
				,NULL                                                                                                                  AS [S_DatabaseCompressedBackupSize]
				,NULL                                                                                                                  AS [S_DatabaseBackupStatus]

				,tBS_D.[backup_finish_date]                                                                                            AS [D_DatabaseBackupDateTime]
				,CASE
					WHEN (tBS_D.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_D.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [D_DatabaseBackupSize]
				,NULL                                                                                                                  AS [D_DatabaseCompressedBackupSize]
				,CASE
					WHEN (ISNULL(tBS_D.[backup_finish_date], N'19000101') &lt; DATEADD(day, -1 * ISNULL(@intDaysFullDatabaseBackupThreshold, 14), GETDATE())) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [D_DatabaseBackupStatus]

				,tBS_I.[backup_finish_date]                                                                                            AS [I_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_I.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_I.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [I_DatabaseBackupSize]
				,NULL                                                                                                                  AS [I_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; ISNULL(tBS_D.[backup_finish_date], N'19000101') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursIncrementalDatabaseBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [I_DatabaseBackupStatus]

				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						tBS_L.[backup_finish_date]
				END                                                                                                                    AS [L_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_L.[backup_size] IS NULL) THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_L.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [L_DatabaseBackupSize]
				,NULL                                                                                                                  AS [L_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						0
					WHEN ISNULL(tBS_L.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursLogBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [L_DatabaseBackupStatus]
			FROM
				[master].[dbo].[sysdatabases] tSD
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'D'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
				) tBS_D ON
					tBS_D.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'I'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
				) tBS_I ON
					tBS_I.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'L'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
				) tBS_L ON
					tBS_L.[database_name] = tSD.[name]
			WHERE
				tSD.[name] NOT IN (
					N'tempdb'
				);

			SELECT
				 t.[DatabaseName]
				,t.[DatabaseStatus]
				,t.[DatabaseUpdateability]
				,t.[S_DatabaseBackupDateTime]
				,t.[S_DatabaseBackupSize]
				,t.[S_DatabaseCompressedBackupSize]
				,t.[S_DatabaseBackupStatus]
				,t.[D_DatabaseBackupDateTime]
				,t.[D_DatabaseBackupSize]
				,t.[D_DatabaseCompressedBackupSize]
				,t.[D_DatabaseBackupStatus]
				,t.[I_DatabaseBackupDateTime]
				,t.[I_DatabaseBackupSize]
				,t.[I_DatabaseCompressedBackupSize]
				,t.[I_DatabaseBackupStatus]
				,t.[L_DatabaseBackupDateTime]
				,t.[L_DatabaseBackupSize]
				,t.[L_DatabaseCompressedBackupSize]
				,t.[L_DatabaseBackupStatus]
			FROM
				@tblBackupResults t
			WHERE
				ISNULL(@isShowBackupIssuesOnly, 0) = 0
				OR (
					ISNULL(@isShowBackupIssuesOnly, 0) = 1
					AND ISNULL(t.[DatabaseStatus], N'?') NOT IN (
						N'OFFLINE'
					)
					AND (
						ISNULL(t.[S_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[D_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[I_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[L_DatabaseBackupStatus], 0) NOT IN (0)
					)
				)
			ORDER BY
				t.[DatabaseName];
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="9.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@ServerName [NVARCHAR](128)
			;

			SET @ServerName = CONVERT([NVARCHAR](128), SERVERPROPERTY(N'Servername'));

			DECLARE
				@tblBackupResults TABLE
				(
					 [DatabaseName]                   [NVARCHAR](128)
					,[DatabaseStatus]                 [NVARCHAR](128)
					,[DatabaseUpdateability]          [NVARCHAR](128)
					,[S_DatabaseBackupDateTime]       [DATETIME]
					,[S_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[S_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[S_DatabaseBackupStatus]         [INTEGER]
					,[D_DatabaseBackupDateTime]       [DATETIME]
					,[D_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[D_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[D_DatabaseBackupStatus]         [INTEGER]
					,[I_DatabaseBackupDateTime]       [DATETIME]
					,[I_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[I_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[I_DatabaseBackupStatus]         [INTEGER]
					,[L_DatabaseBackupDateTime]       [DATETIME]
					,[L_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[L_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[L_DatabaseBackupStatus]         [INTEGER]
				);

			INSERT INTO @tblBackupResults
			(
				 [DatabaseName]
				,[DatabaseStatus]
				,[DatabaseUpdateability]
				,[S_DatabaseBackupDateTime]
				,[S_DatabaseBackupSize]
				,[S_DatabaseCompressedBackupSize]
				,[S_DatabaseBackupStatus]
				,[D_DatabaseBackupDateTime]
				,[D_DatabaseBackupSize]
				,[D_DatabaseCompressedBackupSize]
				,[D_DatabaseBackupStatus]
				,[I_DatabaseBackupDateTime]
				,[I_DatabaseBackupSize]
				,[I_DatabaseCompressedBackupSize]
				,[I_DatabaseBackupStatus]
				,[L_DatabaseBackupDateTime]
				,[L_DatabaseBackupSize]
				,[L_DatabaseCompressedBackupSize]
				,[L_DatabaseBackupStatus]
			)
			SELECT
				 tSD.[name]                                                                                                            AS [DatabaseName]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Status'))                                                   AS [DatabaseStatus]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Updateability'))                                            AS [DatabaseUpdateability]

				,tBS_S.[backup_finish_date]                                                                                            AS [S_DatabaseBackupDateTime]
				,CASE
					WHEN (tBS_S.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_S.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [S_DatabaseBackupSize]
				,NULL                                                                                                                  AS [S_DatabaseCompressedBackupSize]
				,CASE
					WHEN (tBS_S.[backup_finish_date] IS NULL) THEN
						0
					WHEN (ISNULL(@intDaysSnapshotDatabaseBackupThreshold, 0) = 0) THEN
						0
					WHEN (ISNULL(tBS_S.[backup_finish_date], N'19000101') &lt; DATEADD(day, -1 * ISNULL(@intDaysSnapshotDatabaseBackupThreshold, 14), GETDATE())) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [S_DatabaseBackupStatus]

				,tBS_D.[backup_finish_date]                                                                                            AS [D_DatabaseBackupDateTime]
				,CASE
					WHEN (tBS_D.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_D.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [D_DatabaseBackupSize]
				,NULL                                                                                                                  AS [D_DatabaseCompressedBackupSize]
				,CASE
					WHEN (ISNULL(tBS_D.[backup_finish_date], N'19000101') &lt; DATEADD(day, -1 * ISNULL(@intDaysFullDatabaseBackupThreshold, 14), GETDATE())) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [D_DatabaseBackupStatus]

				,tBS_I.[backup_finish_date]                                                                                            AS [I_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_I.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_I.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [I_DatabaseBackupSize]
				,NULL                                                                                                                  AS [I_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; ISNULL(tBS_D.[backup_finish_date], N'19000101') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursIncrementalDatabaseBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [I_DatabaseBackupStatus]

				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						tBS_L.[backup_finish_date]
				END                                                                                                                    AS [L_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_L.[backup_size] IS NULL) THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_L.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [L_DatabaseBackupSize]
				,NULL                                                                                                                  AS [L_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						0
					WHEN ISNULL(tBS_L.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursLogBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [L_DatabaseBackupStatus]
			FROM
				[master].[sys].[databases] tSD
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'D'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 1
				) tBS_S ON
					tBS_S.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'D'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_D ON
					tBS_D.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'I'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_I ON
					tBS_I.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'L'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_L ON
					tBS_L.[database_name] = tSD.[name]
			WHERE
				tSD.[name] NOT IN (
					N'tempdb'
				)
				AND tSD.[source_database_id] IS NULL
			;

			SELECT
				 t.[DatabaseName]
				,t.[DatabaseStatus]
				,t.[DatabaseUpdateability]
				,t.[S_DatabaseBackupDateTime]
				,t.[S_DatabaseBackupSize]
				,t.[S_DatabaseCompressedBackupSize]
				,t.[S_DatabaseBackupStatus]
				,t.[D_DatabaseBackupDateTime]
				,t.[D_DatabaseBackupSize]
				,t.[D_DatabaseCompressedBackupSize]
				,t.[D_DatabaseBackupStatus]
				,t.[I_DatabaseBackupDateTime]
				,t.[I_DatabaseBackupSize]
				,t.[I_DatabaseCompressedBackupSize]
				,t.[I_DatabaseBackupStatus]
				,t.[L_DatabaseBackupDateTime]
				,t.[L_DatabaseBackupSize]
				,t.[L_DatabaseCompressedBackupSize]
				,t.[L_DatabaseBackupStatus]
			FROM
				@tblBackupResults t
			WHERE
				ISNULL(@isShowBackupIssuesOnly, 0) = 0
				OR (
					ISNULL(@isShowBackupIssuesOnly, 0) = 1
					AND ISNULL(t.[DatabaseStatus], N'?') NOT IN (
						N'OFFLINE'
					)
					AND (
						ISNULL(t.[S_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[D_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[I_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[L_DatabaseBackupStatus], 0) NOT IN (0)
					)
				)
			ORDER BY
				t.[DatabaseName];
		</sql-select-text>
		<sql-select-text MinSupportedVersion="10.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@ServerName [NVARCHAR](128)
			;

			SET @ServerName = CONVERT([NVARCHAR](128), SERVERPROPERTY(N'Servername'));

			DECLARE
				@tblBackupResults TABLE
				(
					 [DatabaseName]                   [NVARCHAR](128)
					,[DatabaseStatus]                 [NVARCHAR](128)
					,[DatabaseUpdateability]          [NVARCHAR](128)
					,[S_DatabaseBackupDateTime]       [DATETIME]
					,[S_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[S_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[S_DatabaseBackupStatus]         [INTEGER]
					,[D_DatabaseBackupDateTime]       [DATETIME]
					,[D_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[D_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[D_DatabaseBackupStatus]         [INTEGER]
					,[I_DatabaseBackupDateTime]       [DATETIME]
					,[I_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[I_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[I_DatabaseBackupStatus]         [INTEGER]
					,[L_DatabaseBackupDateTime]       [DATETIME]
					,[L_DatabaseBackupSize]           [NUMERIC](20, 2)
					,[L_DatabaseCompressedBackupSize] [NUMERIC](20, 2)
					,[L_DatabaseBackupStatus]         [INTEGER]
				);

			INSERT INTO @tblBackupResults
			(
				 [DatabaseName]
				,[DatabaseStatus]
				,[DatabaseUpdateability]
				,[S_DatabaseBackupDateTime]
				,[S_DatabaseBackupSize]
				,[S_DatabaseCompressedBackupSize]
				,[S_DatabaseBackupStatus]
				,[D_DatabaseBackupDateTime]
				,[D_DatabaseBackupSize]
				,[D_DatabaseCompressedBackupSize]
				,[D_DatabaseBackupStatus]
				,[I_DatabaseBackupDateTime]
				,[I_DatabaseBackupSize]
				,[I_DatabaseCompressedBackupSize]
				,[I_DatabaseBackupStatus]
				,[L_DatabaseBackupDateTime]
				,[L_DatabaseBackupSize]
				,[L_DatabaseCompressedBackupSize]
				,[L_DatabaseBackupStatus]
			)
			SELECT
				 tSD.[name]                                                                                                            AS [DatabaseName]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Status'))                                                   AS [DatabaseStatus]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Updateability'))                                            AS [DatabaseUpdateability]

				,tBS_S.[backup_finish_date]                                                                                            AS [S_DatabaseBackupDateTime]
				,CASE
					WHEN (tBS_S.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_S.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [S_DatabaseBackupSize]
				,CASE
					WHEN (tBS_S.[compressed_backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_S.[compressed_backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [S_DatabaseCompressedBackupSize]
				,CASE
					WHEN (tBS_S.[backup_finish_date] IS NULL) THEN
						0
					WHEN (ISNULL(@intDaysSnapshotDatabaseBackupThreshold, 0) = 0) THEN
						0
					WHEN (ISNULL(tBS_S.[backup_finish_date], N'19000101') &lt; DATEADD(day, -1 * ISNULL(@intDaysFullDatabaseBackupThreshold, 14), GETDATE())) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [D_DatabaseBackupStatus]

				,tBS_D.[backup_finish_date]                                                                                            AS [D_DatabaseBackupDateTime]
				,CASE
					WHEN (tBS_D.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_D.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [D_DatabaseBackupSize]
				,CASE
					WHEN (tBS_D.[compressed_backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_D.[compressed_backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [D_DatabaseCompressedBackupSize]
				,CASE
					WHEN (ISNULL(tBS_D.[backup_finish_date], N'19000101') &lt; DATEADD(day, -1 * ISNULL(@intDaysFullDatabaseBackupThreshold, 14), GETDATE())) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [D_DatabaseBackupStatus]

				,tBS_I.[backup_finish_date]                                                                                            AS [I_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_I.[backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_I.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [I_DatabaseBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_I.[compressed_backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_I.[compressed_backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [I_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; ISNULL(tBS_D.[backup_finish_date], N'19000101') THEN
						0
					WHEN ISNULL(tBS_I.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursIncrementalDatabaseBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [I_DatabaseBackupStatus]

				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						tBS_L.[backup_finish_date]
				END                                                                                                                    AS [L_DatabaseBackupDateTime]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_L.[backup_size] IS NULL) THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_L.[backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [L_DatabaseBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						NULL
					WHEN (tBS_L.[compressed_backup_size] IS NULL) THEN
						NULL
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						NULL
					ELSE
						CONVERT([NUMERIC](20, 2), tBS_L.[compressed_backup_size] / (CONVERT([NUMERIC](20, 2), 1024.0 * 1024.0)))
				END                                                                                                                    AS [L_DatabaseCompressedBackupSize]
				,CASE
					WHEN tSD.[name] IN (N'master') THEN
						0
					WHEN (DatabasePropertyEx(tSD.[name], N'Recovery') IN (N'SIMPLE')) THEN
						0
					WHEN ISNULL(tBS_L.[backup_finish_date], N'19000101') &lt; DATEADD(hour, -1 * ISNULL(@intHoursLogBackupThreshold, 24), GETDATE()) THEN
						1
					ELSE
						0
				END                                                                                                                    AS [L_DatabaseBackupStatus]
			FROM
				[master].[sys].[databases] tSD
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
						,tBS.[compressed_backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'D'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 1
				) tBS_S ON
					tBS_S.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
						,tBS.[compressed_backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'D'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_D ON
					tBS_D.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
						,tBS.[compressed_backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'I'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_I ON
					tBS_I.[database_name] = tSD.[name]
				LEFT OUTER JOIN (
					SELECT
						 tBS.[database_name]
						,tBS.[backup_finish_date]
						,tBS.[backup_size]
						,tBS.[compressed_backup_size]
					FROM
						[msdb].[dbo].[backupset] tBS
						INNER JOIN (
							SELECT
								 t.[server_name]             AS [server_name]
								,t.[database_name]           AS [database_name]
								,t.[is_snapshot]             AS [is_snapshot]
								,t.[type]                    AS [type]
								,MAX(t.[backup_finish_date]) AS [backup_finish_date]
							FROM
								[msdb].[dbo].[backupset] t
							WHERE
								t.[type] = N'L'
								AND t.[backup_finish_date] IS NOT NULL
							GROUP BY
								 t.[server_name]
								,t.[database_name]
								,t.[is_snapshot]
								,t.[type]
						) tBSLast ON
							tBSLast.[server_name] = tBS.[server_name]
							AND tBSLast.[database_name] = tBS.[database_name]
							AND tBSLast.[is_snapshot] = tBS.[is_snapshot]
							AND tBSLast.[type] = tBS.[type]
							AND tBSLast.[backup_finish_date] = tBS.[backup_finish_date]
					WHERE
						tBS.[server_name] = @ServerName
						AND tBS.[is_snapshot] = 0
				) tBS_L ON
					tBS_L.[database_name] = tSD.[name]
			WHERE
				tSD.[name] NOT IN (
					N'tempdb'
				)
				AND tSD.[source_database_id] IS NULL
			;

			SELECT
				 t.[DatabaseName]
				,t.[DatabaseStatus]
				,t.[DatabaseUpdateability]
				,t.[S_DatabaseBackupDateTime]
				,t.[S_DatabaseBackupSize]
				,t.[S_DatabaseCompressedBackupSize]
				,t.[S_DatabaseBackupStatus]
				,t.[D_DatabaseBackupDateTime]
				,t.[D_DatabaseBackupSize]
				,t.[D_DatabaseCompressedBackupSize]
				,t.[D_DatabaseBackupStatus]
				,t.[I_DatabaseBackupDateTime]
				,t.[I_DatabaseBackupSize]
				,t.[I_DatabaseCompressedBackupSize]
				,t.[I_DatabaseBackupStatus]
				,t.[L_DatabaseBackupDateTime]
				,t.[L_DatabaseBackupSize]
				,t.[L_DatabaseCompressedBackupSize]
				,t.[L_DatabaseBackupStatus]
			FROM
				@tblBackupResults t
			WHERE
				ISNULL(@isShowBackupIssuesOnly, 0) = 0
				OR (
					ISNULL(@isShowBackupIssuesOnly, 0) = 1
					AND ISNULL(t.[DatabaseStatus], N'?') NOT IN (
						N'OFFLINE'
					)
					AND (
						ISNULL(t.[S_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[D_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[I_DatabaseBackupStatus], 0) NOT IN (0)
						OR
						ISNULL(t.[L_DatabaseBackupStatus], 0) NOT IN (0)
					)
				)
			ORDER BY
				t.[DatabaseName];
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@isShowBackupIssuesOnly" type="Bit" />
			<sql-select-parameter name="@intDaysSnapshotDatabaseBackupThreshold" type="Int" />
			<sql-select-parameter name="@intDaysFullDatabaseBackupThreshold" type="Int" />
			<sql-select-parameter name="@intHoursIncrementalDatabaseBackupThreshold" type="Int" />
			<sql-select-parameter name="@intHoursLogBackupThreshold" type="Int" />
		</sql-select-parameters>
	</sql-select>
</sqlquery>
</root>
