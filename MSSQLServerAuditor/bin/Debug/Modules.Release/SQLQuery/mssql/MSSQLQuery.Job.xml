<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetJobsList">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@AdminUserName [NVARCHAR](128)
			;

			SET @AdminUserName = SUSER_SNAME(0x01);

			SELECT
				 tSJ.[name]                   AS [JobName]
				,tSJ.[enabled]                AS [JobEnabled]
				,SUSER_SNAME(tSJ.[owner_sid]) AS [JobOwner]
				,CASE
					WHEN (SUSER_SNAME(tSJ.[owner_sid]) &lt;&gt; @AdminUserName) THEN
						1
					ELSE
						0
				END                           AS [IsJobOwnerIssue]
				,tSJS.[name]                  AS [JobScheduleName]
				,tSJS.[enabled]               AS [JobScheduleEnabled]
				,CASE
					WHEN ((tSJS.[active_start_date] IS NULL) OR (tSJS.[active_start_time] IS NULL)) THEN
						NULL
					ELSE
						CONVERT([DATETIME],
							CONVERT([NVARCHAR](128), tSJS.[active_start_date])
							+ N' '
							+ STUFF(STUFF(REPLACE(STR(tSJS.[active_start_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
						)
				END                           AS [JobScheduleActiveStartDateTime]
				,CASE
					WHEN ((tSJS.[active_end_date] IS NULL) OR (tSJS.[active_end_time] IS NULL)) THEN
						NULL
					ELSE
						CONVERT([DATETIME],
							CONVERT([NVARCHAR](128), tSJS.[active_end_date])
							+ N' '
							+ STUFF(STUFF(REPLACE(STR(tSJS.[active_end_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
						)
				END                           AS [JobScheduleActiveEndDateTime]
				,CASE
					WHEN (tSJS.[freq_type] IS NULL) THEN
						NULL
					WHEN ((tSJS.[freq_type] = 0x1) AND (tSJS.[active_start_date] IS NOT NULL) AND (tSJS.[active_start_time] IS NOT NULL)) THEN
						  N'Once at '
						+ CONVERT([NVARCHAR](128),
							CONVERT([DATETIME],
								  CONVERT([NVARCHAR](128), tSJS.[active_start_date])
								+ N' '
								+ STUFF(STUFF(REPLACE(STR(tSJS.[active_start_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
							)
						)
					WHEN (tSJS.[freq_type] = 0x4) THEN -- Daily
						N'Every Day'
					WHEN (tSJS.[freq_type] = 0x8) THEN -- Weekly
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSJS.[freq_recurrence_factor])
						+ N' week(s)'
					WHEN (tSJS.[freq_type] = 0x10) THEN -- Monthly
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSJS.[freq_recurrence_factor])
						+ N' month(s)'
					WHEN (tSJS.[freq_type] = 0x20) THEN -- Monthly Relative
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSJS.[freq_recurrence_factor])
						+ N' month(s)'
					WHEN (tSJS.[freq_type] = 0x40) THEN -- AutoStart
						N'By AutoStart'
					WHEN (tSJS.[freq_type] = 0x80) THEN -- OnIdle
						N'On Idle'
					ELSE
						NULL
				END                           AS [JobScheduleDescription]
				,tSJ.[date_created]           AS [JobDateCreated]
				,tSJ.[date_modified]          AS [JobDateModified]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				LEFT OUTER JOIN [msdb].[dbo].[sysjobschedules] tSJS ON
					tSJS.[job_id] = tSJ.[job_id]
			ORDER BY
				tSJ.[name] ASC;
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@AdminUserName [NVARCHAR](128)
			;

			SET @AdminUserName = SUSER_SNAME(0x01);

			SELECT
				 tSJ.[name]                   AS [JobName]
				,tSJ.[enabled]                AS [JobEnabled]
				,SUSER_SNAME(tSJ.[owner_sid]) AS [JobOwner]
				,CASE
					WHEN (SUSER_SNAME(tSJ.[owner_sid]) &lt;&gt; @AdminUserName) THEN
						1
					ELSE
						0
				END                           AS [IsJobOwnerIssue]
				,tSS.[name]                   AS [JobScheduleName]
				,tSS.[enabled]                AS [JobScheduleEnabled]
				,CASE
					WHEN ((tSS.[active_start_date] IS NULL) OR (tSS.[active_start_time] IS NULL)) THEN
						NULL
					ELSE
						CONVERT([DATETIME],
							CONVERT([NVARCHAR](128), tSS.[active_start_date])
							+ N' '
							+ STUFF(STUFF(REPLACE(STR(tSS.[active_start_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
						)
				END                           AS [JobScheduleActiveStartDateTime]
				,CASE
					WHEN ((tSS.[active_end_date] IS NULL) OR (tSS.[active_end_time] IS NULL)) THEN
						NULL
					ELSE
						CONVERT([DATETIME],
							CONVERT([NVARCHAR](128), tSS.[active_end_date])
							+ N' '
							+ STUFF(STUFF(REPLACE(STR(tSS.[active_end_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
						)
				END                           AS [JobScheduleActiveEndDateTime]
				,CASE
					WHEN (tSS.[freq_type] IS NULL) THEN
						NULL
					WHEN ((tSS.[freq_type] = 0x1) AND (tSS.[active_start_date] IS NOT NULL) AND (tSS.[active_start_time] IS NOT NULL)) THEN
						  N'Once at '
						+ CONVERT([NVARCHAR](128),
							CONVERT([DATETIME],
								  CONVERT([NVARCHAR](128), tSS.[active_start_date])
								+ N' '
								+ STUFF(STUFF(REPLACE(STR(tSS.[active_start_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
							)
						)
					WHEN (tSS.[freq_type] = 0x4) THEN -- Daily
						N'Every Day'
					WHEN (tSS.[freq_type] = 0x8) THEN -- Weekly
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSS.[freq_recurrence_factor])
						+ N' week(s)'
					WHEN (tSS.[freq_type] = 0x10) THEN -- Monthly
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSS.[freq_recurrence_factor])
						+ N' month(s)'
					WHEN (tSS.[freq_type] = 0x20) THEN -- Monthly Relative
						  N'Every '
						+ CONVERT([NVARCHAR](128), tSS.[freq_recurrence_factor])
						+ N' month(s)'
					WHEN (tSS.[freq_type] = 0x40) THEN -- AutoStart
						N'By AutoStart'
					WHEN (tSS.[freq_type] = 0x80) THEN -- OnIdle
						N'On Idle'
					ELSE
						NULL
				END                           AS [JobScheduleDescription]
				,tSJ.[date_created]           AS [JobDateCreated]
				,tSJ.[date_modified]          AS [JobDateModified]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				LEFT OUTER JOIN [msdb].[dbo].[sysjobschedules] tSJS ON
					tSJS.[job_id] = tSJ.[job_id]
				LEFT OUTER JOIN [msdb].[dbo].[sysschedules] tSS ON
					tSS.[schedule_id] = tSJS.[schedule_id]
			ORDER BY
				tSJ.[name] ASC;
		</sql-select-text>
	</sql-select>

	<sql-select name="GetJobsExecutionHistory">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@datetimeStart [DATETIME]
			;

			CREATE TABLE #xp_results
			(
				 [job_id]                [UNIQUEIDENTIFIER]                       NOT NULL
				,[last_run_date]         [INT]                                    NULL
				,[last_run_time]         [INT]                                    NULL
				,[next_run_date]         [INT]                                    NULL
				,[next_run_time]         [INT]                                    NULL
				,[next_run_schedule_id]  [INT]                                    NULL
				,[requested_to_run]      [INT]                                    NULL
				,[request_source]        [INT]                                    NULL
				,[request_source_id]     [NVARCHAR](128) COLLATE DATABASE_DEFAULT NULL
				,[running]               [INT]                                    NULL
				,[current_step]          [INT]                                    NULL
				,[current_retry_attempt] [INT]                                    NULL
				,[job_state]             [INT]                                    NULL
			);

			SET @datetimeStart = GETDATE();

			INSERT #xp_results
				EXEC [master].[dbo].[xp_sqlagent_enum_jobs]
					 @is_sysadmin = 1
					,@job_owner = '';

			IF (@intMonthesInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(month, -1 * @intMonthesInHistory, GETDATE());
			END
			ELSE IF (@intWeeksInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(week, -1 * @intWeeksInHistory, GETDATE());
			END
			ELSE IF (@intDaysInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(day, -1 * @intDaysInHistory, GETDATE());
			END

			SELECT
				 tSJ.[name]                                                                         AS [JobName]
				,tSJ.[enabled]                                                                      AS [JobEnabled]
				,GETDATE()                                                                          AS [JobRunDateTime]
				,0                                                                                  AS [JobDurationInSeconds]
				,GETDATE()                                                                          AS [JobFinishDateTime]
				,N'00:00:00'                                                                        AS [JobDurationText]
				,CONVERT([NVARCHAR](128), N'In progress')                                           AS [JobRunStatus]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				INNER JOIN #xp_results tXP ON
					tXP.[job_id] = tSJ.[job_id]
			WHERE
				tXP.[running] = 1
				AND ISNULL(@isShowJobsIssuesOnly, 0) = 0

			UNION ALL

			SELECT
				 tSJ.[name]                                                                         AS [JobName]
				,tSJ.[enabled]                                                                      AS [JobEnabled]
				,CONVERT([DATETIME], CONVERT([NVARCHAR](128), tSJH.[run_date])
						+ N' '
						+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				)                                                                                   AS [JobRunDateTime]
				,(tSJH.[run_duration] / 1000000) * 86400
						+ (((tSJH.[run_duration]-((tSJH.[run_duration]/1000000)*1000000))/10000)*3600)
						+ (((tSJH.[run_duration]-((tSJH.[run_duration]/10000)*10000))/100)*60)
						+ (tSJH.[run_duration]-(tSJH.[run_duration]/100)*100)
				                                                                                    AS [JobDurationInSeconds]
				,DATEADD(second
					,((tSJH.[run_duration] / 1000000) * 86400)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/1000000)*1000000))/10000)*3600)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/10000)*10000))/100)*60)
					+ (tSJH.[run_duration]-(tSJH.[run_duration]/100)*100)
					,CONVERT([DATETIME]
						,CONVERT([NVARCHAR](128), tSJH.[run_date])
						+ N' '
						+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
					)
				)                                                                                   AS [JobFinishDateTime]
				,STUFF(STUFF(REPLACE(STR(
					tSJH.[run_duration], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':'
				)                                                                                   AS [JobDurationText]
				,CASE tSJH.[run_status]
					WHEN 0 THEN CONVERT([NVARCHAR](128), N'Failed')
					WHEN 1 THEN CONVERT([NVARCHAR](128), N'Succeeded')
					WHEN 2 THEN CONVERT([NVARCHAR](128), N'Retry')
					WHEN 3 THEN CONVERT([NVARCHAR](128), N'Cancelled')
					WHEN 4 THEN CONVERT([NVARCHAR](128), N'In progress')
					ELSE        CONVERT([NVARCHAR](128), tSJH.[run_status])
				END                                                                                 AS [JobRunStatus]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				INNER JOIN [msdb].[dbo].[sysjobhistory] tSJH ON
					tSJH.[job_id] = tSJ.[job_id]
			WHERE
				tSJH.[step_id] = 0
				AND tSJH.[run_duration] &gt;= 0
				AND CONVERT([DATETIME], CONVERT([NVARCHAR](128), tSJH.[run_date])
					+ N' '
					+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				) &gt;= @datetimeStart
				AND (
					ISNULL(@isShowJobsIssuesOnly, 0) = 0
					OR (
						ISNULL(@isShowJobsIssuesOnly, 0) = 1
						AND tSJH.[run_status] NOT IN (
							 1
							,2
							,3
							,4
						)
					)
				)
			ORDER BY
				5 DESC;
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				 @datetimeStart [DATETIME]
				,@datetimeEnd   [DATETIME]
			;

			CREATE TABLE #xp_results
			(
				 [job_id]                [UNIQUEIDENTIFIER]                       NOT NULL
				,[last_run_date]         [INT]                                    NULL
				,[last_run_time]         [INT]                                    NULL
				,[next_run_date]         [INT]                                    NULL
				,[next_run_time]         [INT]                                    NULL
				,[next_run_schedule_id]  [INT]                                    NULL
				,[requested_to_run]      [INT]                                    NULL
				,[request_source]        [INT]                                    NULL
				,[request_source_id]     [NVARCHAR](128) COLLATE DATABASE_DEFAULT NULL
				,[running]               [INT]                                    NULL
				,[current_step]          [INT]                                    NULL
				,[current_retry_attempt] [INT]                                    NULL
				,[job_state]             [INT]                                    NULL
			);

			SET @datetimeStart = GETDATE();
			SET @datetimeEnd   = GETDATE();

			INSERT #xp_results
				EXEC [master].[dbo].[xp_sqlagent_enum_jobs]
					 @is_sysadmin = 1
					,@job_owner = '';

			IF (@intMonthesInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(month, -1 * @intMonthesInHistory, GETDATE());
			END
			ELSE IF (@intWeeksInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(week, -1 * @intWeeksInHistory, GETDATE());
			END
			ELSE IF (@intDaysInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(day, -1 * @intDaysInHistory, GETDATE());
			END

			IF (@StartTime IS NOT NULL)
			BEGIN
				SET @datetimeStart = CONVERT([DATETIME],
					CONVERT([NVARCHAR](128), @datetimeStart, 112)
					+ N' '
					+ @StartTime
				);
			END

			IF (@EndTime IS NOT NULL)
			BEGIN
				SET @datetimeEnd = CONVERT([DATETIME],
					CONVERT([NVARCHAR](128), @datetimeEnd, 112)
					+ N' '
					+ @EndTime
				);
			END

			SELECT
				 tSJ.[name]                                                                         AS [JobName]
				,tSJ.[enabled]                                                                      AS [JobEnabled]
				,CASE
					WHEN (tSJA.[start_execution_date] IS NULL) THEN
						@datetimeEnd
					WHEN (tSJA.[start_execution_date] &lt; @datetimeStart) THEN
						@datetimeStart
					ELSE
						tSJA.[start_execution_date]
				END                                                                                 AS [JobRunDateTime]
				,CASE
					WHEN (tSJA.[start_execution_date] IS NULL) THEN
						0
					ELSE
						DATEDIFF(second, tSJA.[start_execution_date], @datetimeEnd)
				END                                                                                 AS [JobDurationInSeconds]
				,@datetimeEnd                                                                       AS [JobFinishDateTime]

				,  RIGHT(N'00' + CONVERT([NVARCHAR](128), DATEDIFF(day, tSJA.[start_execution_date], GETDATE())), 2)
				 + N' '
				 + RIGHT(N'00' + CONVERT([NVARCHAR](128), DATEDIFF(hour, tSJA.[start_execution_date], GETDATE()) % 24), 2)
				 + N':'
				 + RIGHT(N'00' + CONVERT([NVARCHAR](128), DATEDIFF(minute, tSJA.[start_execution_date], GETDATE()) % 60), 2)
				 + N':'
				 + RIGHT(N'00' + CONVERT([NVARCHAR](128), DATEDIFF(second, tSJA.[start_execution_date], GETDATE()) % 60), 2)

				                                                                                    AS [JobDurationText]
				,CONVERT([NVARCHAR](128), N'In progress')                                           AS [JobRunStatus]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				INNER JOIN #xp_results tXP ON
					tXP.[job_id] = tSJ.[job_id]
				INNER JOIN [msdb].[dbo].[sysjobactivity] tSJA ON
					tSJA.[job_id] = tSJ.[job_id]
					AND tSJA.[job_history_id] IS NULL
				INNER JOIN (
					SELECT
						 t.[job_id]          AS [job_id]
						,MAX(t.[session_id]) AS [session_id]
					FROM
						[msdb].[dbo].[sysjobactivity] t
					GROUP BY
						t.[job_id]
				) tSJA2 ON
					tSJA2.[job_id] = tSJA.[job_id]
					AND tSJA2.[session_id] = tSJA.[session_id]
			WHERE
				tSJ.[name] = ISNULL(@JobName, tSJ.[name])
				AND tXP.[running] = 1
				AND tSJA.[run_requested_date] IS NOT NULL
				AND tSJA.[stop_execution_date] IS NULL
				AND ISNULL(@isShowJobsIssuesOnly, 0) = 0

			UNION ALL

			SELECT
				 tSJ.[name]                                                                         AS [JobName]
				,tSJ.[enabled]                                                                      AS [JobEnabled]
				,CONVERT([DATETIME], CONVERT([NVARCHAR](128), tSJH.[run_date])
						+ N' '
						+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				)                                                                                   AS [JobRunDateTime]
				,(tSJH.[run_duration] / 1000000) * 86400
						+ (((tSJH.[run_duration]-((tSJH.[run_duration]/1000000)*1000000))/10000)*3600)
						+ (((tSJH.[run_duration]-((tSJH.[run_duration]/10000)*10000))/100)*60)
						+ (tSJH.[run_duration]-(tSJH.[run_duration]/100)*100)
				                                                                                    AS [JobDurationInSeconds]
				,DATEADD(second
					,((tSJH.[run_duration] / 1000000) * 86400)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/1000000)*1000000))/10000)*3600)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/10000)*10000))/100)*60)
					+ (tSJH.[run_duration]-(tSJH.[run_duration]/100)*100)
					,CONVERT([DATETIME]
						,CONVERT([NVARCHAR](128), tSJH.[run_date])
						+ N' '
						+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
					)
				)                                                                                   AS [JobFinishDateTime]
				,STUFF(STUFF(REPLACE(STR(
					tSJH.[run_duration], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':'
				)                                                                                   AS [JobDurationText]
				,CONVERT([NVARCHAR](128), CASE tSJH.[run_status]
					WHEN 0 THEN N'Failed'
					WHEN 1 THEN N'Succeeded'
					WHEN 2 THEN N'Retry'
					WHEN 3 THEN N'Cancelled'
					WHEN 4 THEN N'In progress'
					ELSE        CONVERT([NVARCHAR](128), tSJH.[run_status])
				END)                                                                                AS [JobRunStatus]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				INNER JOIN [msdb].[dbo].[sysjobhistory] tSJH ON
					tSJH.[job_id] = tSJ.[job_id]
			WHERE
				tSJ.[name] = ISNULL(@JobName, tSJ.[name])
				AND tSJH.[step_id] = 0
				AND tSJH.[run_duration] &gt;= 0
				AND CONVERT([DATETIME], CONVERT([NVARCHAR](128), tSJH.[run_date])
					+ N' '
					+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				) BETWEEN @datetimeStart AND @datetimeEnd
				AND (
					ISNULL(@isShowJobsIssuesOnly, 0) = 0
					OR (
						ISNULL(@isShowJobsIssuesOnly, 0) = 1
						AND tSJH.[run_status] NOT IN (
							 1
							,2
							,3
							,4
						)
					)
				)
			ORDER BY
				5 DESC;
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@intMonthesInHistory"  type="Int"/>
			<sql-select-parameter name="@intWeeksInHistory"    type="Int"/>
			<sql-select-parameter name="@intDaysInHistory"     type="Int"/>
			<sql-select-parameter name="@isShowJobsIssuesOnly" type="Bit" />
			<sql-select-parameter name="@StartTime"            type="NVarChar" />
			<sql-select-parameter name="@EndTime"              type="NVarChar" />
			<sql-select-parameter name="@JobName"              type="NVarChar"/>
		</sql-select-parameters>
	</sql-select>

	<sql-select name="GetJobStepsExecutionHistory">
		<sql-select-text MinSupportedVersion="*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@datetimeStart [DATETIME];

			SET @datetimeStart = GETDATE();

			IF (@intMonthesInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(month, -1 * @intMonthesInHistory, GETDATE());
			END
			ELSE IF (@intWeeksInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(week, -1 * @intWeeksInHistory, GETDATE());
			END
			ELSE IF (@intDaysInHistory IS NOT NULL)
			BEGIN
				SET @datetimeStart = DATEADD(day, -1 * @intDaysInHistory, GETDATE());
			END

			SELECT
				 CONVERT([DATETIME]
					,CONVERT([NVARCHAR](128), tSJH.[run_date])
					+ N' '
					+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				)                                                                                   AS [JobRunDateTime]
				,tSJ.[name]                                                                         AS [JobName]
				,tSJ.[enabled]                                                                      AS [JobEnabled]
				,tSJS.[step_id]                                                                     AS [JobStepId]
				,tSJS.[step_name]                                                                   AS [JobStepName]
				,tSJS.[subsystem]                                                                   AS [JobStepSubSystem]
				,(
					(tSJH.[run_duration] / 1000000) * 86400)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/1000000)*1000000))/10000)*3600)
					+ (((tSJH.[run_duration]-((tSJH.[run_duration]/10000)*10000))/100)*60)
					+ (tSJH.[run_duration]-(tSJH.[run_duration]/100)*100
				)                                                                                   AS [JobDurationInSeconds]
				,STUFF(STUFF(REPLACE(STR(
					tSJH.[run_duration], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':'
				)                                                                                   AS [JobDurationText]
				,CASE tSJH.[run_status]
					WHEN 0 THEN N'Failed'
					WHEN 1 THEN N'Succeeded'
					WHEN 2 THEN N'Retry'
					WHEN 3 THEN N'Cancelled'
					WHEN 4 THEN N'In progress'
					ELSE        CONVERT([NVARCHAR](128), tSJH.[run_status])
				END                                                                                 AS [JobRunStatus]
			FROM
				[msdb].[dbo].[sysjobs] tSJ
				INNER JOIN [msdb].[dbo].[sysjobsteps] tSJS ON
					tSJS.[job_id] = tSJ.[job_id]
				INNER JOIN [msdb].[dbo].[sysjobhistory] tSJH ON
					tSJH.[job_id] = tSJ.[job_id]
					AND tSJH.[step_id] = tSJS.[step_id]
			WHERE
				tSJ.[name] = ISNULL(@JobName, tSJ.[name])
				AND tSJH.[run_duration] &gt;= 0
				AND CONVERT([DATETIME]
					,CONVERT([NVARCHAR](128), tSJH.[run_date])
					+ N' '
					+ STUFF(STUFF(REPLACE(STR(tSJH.[run_time], 6, 0), N' ', N'0'), 5, 0, N':'), 3, 0, N':')
				) &gt;= @datetimeStart
				AND (
					ISNULL(@isShowJobsIssuesOnly, 0) = 0
					OR (
						ISNULL(@isShowJobsIssuesOnly, 0) = 1
						AND tSJH.[run_status] NOT IN (
							 1
							,2
							,3
							,4
						)
					)
				)
			ORDER BY
				1 DESC;
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@intMonthesInHistory"  type="Int"     />
			<sql-select-parameter name="@intWeeksInHistory"    type="Int"     />
			<sql-select-parameter name="@intDaysInHistory"     type="Int"     />
			<sql-select-parameter name="@isShowJobsIssuesOnly" type="Bit"     />
			<sql-select-parameter name="@JobName"              type="NVarChar"/>
		</sql-select-parameters>
	</sql-select>
</sqlquery>
</root>
