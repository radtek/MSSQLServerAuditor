<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetInstanceExecQueries">
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			SELECT
				 MAX(qs.[last_execution_time])                 AS [EventTime]
				,ISNULL(qt.[dbid], -1)                         AS [DatabaseId]
				,CASE
					WHEN (ISNULL(qt.[dbid], -1) = 32767) THEN
						N'ResourceDB'
					ELSE
						MIN(ISNULL(tMSSD.[name], N''))
				END                                            AS [DatabaseName]
				,RTRIM(LTRIM(SUBSTRING(
					qt.[TEXT], (qs.[statement_start_offset] / 2) + 1,
					((
						CASE qs.[statement_end_offset]
							WHEN (-1) THEN
								DATALENGTH(qt.[TEXT])
							ELSE
								qs.[statement_end_offset]
						END
						- qs.[statement_start_offset]
					) / 2) + 1
				)))                                             AS [query_text]
				,MAX(ISNULL(qs.[execution_count], 0))           AS [execution_count]
				,MAX(ISNULL(qs.[total_worker_time], 0))         AS [total_worker_time]
				,MAX(ISNULL(qs.[total_elapsed_time], 0))        AS [total_elapsed_time]
				,MAX(ISNULL(qs.[total_logical_reads], 0))       AS [total_logical_reads]
				,MAX(ISNULL(qs.[total_logical_writes], 0))      AS [total_logical_writes]
			FROM
				(
					SELECT TOP (@intNumberOfRowsToShow)
						 tSDEQS.[last_execution_time]
						,tSDEQS.[sql_handle]
						,tSDEQS.[statement_start_offset]
						,tSDEQS.[statement_end_offset]
						,tSDEQS.[execution_count]
						,tSDEQS.[total_worker_time]
						,tSDEQS.[total_elapsed_time]
						,tSDEQS.[total_logical_reads]
						,tSDEQS.[total_logical_writes]
					FROM
						[sys].[dm_exec_query_stats] tSDEQS
					WHERE
						tSDEQS.[last_execution_time] IS NOT NULL
					ORDER BY
						tSDEQS.[last_execution_time]
				) AS qs
				CROSS APPLY [sys].[dm_exec_sql_text](qs.[sql_handle]) qt
				LEFT OUTER JOIN [master].[sys].[sysdatabases] tMSSD ON
					tMSSD.[dbid] = qt.[dbid]
			WHERE
				qs.[last_execution_time] IS NOT NULL
			GROUP BY
				 ISNULL(qt.[dbid], -1)
				,RTRIM(LTRIM(SUBSTRING(
					qt.[TEXT], (qs.[statement_start_offset] / 2) + 1,
					((
						CASE qs.[statement_end_offset]
							WHEN (-1) THEN
								DATALENGTH(qt.[TEXT])
							ELSE
								qs.[statement_end_offset]
						END
						- qs.[statement_start_offset]
					) / 2) + 1
				)))
			;
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@intNumberOfRowsToShow" type="Int" />
		</sql-select-parameters>
		<sqlite_statements>
			<sqlite_statement id="13">
				INSERT INTO [hist].[h_ServerInstance]
				(
					 [d_Query_id]
					,[d_ServerInstance_id]
					,[ServerInstanceName]
					,[ConnectionName]
				)
				SELECT
					 MIN(dQ.[rowid])
					,MIN(dQ.[d_ServerInstance_id])
					,dSI.[ServerInstanceName]
					,MIN(IFNULL(dSI.[ConnectionName], ''))
				FROM
					[d_Query] dQ
					INNER JOIN [d_ServerInstance] dSI ON
						dSI.[rowid] = dQ.[d_ServerInstance_id]
					LEFT OUTER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[ServerInstanceName] = dSI.[ServerInstanceName]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND dSI.[ServerInstanceName] IS NOT NULL
					AND hSI.[rowid] IS NULL
				GROUP BY
					dSI.[ServerInstanceName]
				;
			</sqlite_statement>
			<sqlite_statement id="14">
				UPDATE [hist].[h_ServerInstance] SET
					 [d_Query_id] = @d_Query_id
					,[d_ServerInstance_id] = (
						SELECT
							MIN(dQ.[d_ServerInstance_id])
						FROM
							[d_Query] dQ
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dQ.[d_ServerInstance_id] IS NOT NULL
					)
				WHERE
					[ServerInstanceName] = (
						SELECT
							MIN(dSI.[ServerInstanceName])
						FROM
							[d_Query] dQ
							INNER JOIN [d_ServerInstance] dSI ON
								dSI.[rowid] = dQ.[d_ServerInstance_id]
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dSI.[ServerInstanceName] IS NOT NULL
					) AND [d_ServerInstance_id] != (
						SELECT
							MIN(dQ.[d_ServerInstance_id])
						FROM
							[d_Query] dQ
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dQ.[d_ServerInstance_id] IS NOT NULL
					)
				;
			</sqlite_statement>
			<sqlite_statement id="31">
				INSERT INTO [hist].[h_ServerInstanceDatabase]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[DatabaseId]
					,[DatabaseName]
				)
				SELECT
					 MIN(dQ.[rowid])
					,hSI.[rowid]
					,t.[DatabaseId]
					,t.[DatabaseName]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceExecQueries}$_${1}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					LEFT OUTER JOIN [hist].[h_ServerInstanceDatabase] hSID ON
						hSID.[h_ServerInstance_id] = hSI.[rowid]
						AND hSID.[DatabaseId] = t.[DatabaseId]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND hSID.[rowid] IS NULL
				GROUP BY
					 hSI.[rowid]
					,t.[DatabaseId]
					,t.[DatabaseName]
				;
			</sqlite_statement>
			<sqlite_statement id="41">
				INSERT INTO [hist].[h_InstanceExecQueryText]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[ExecQueryId]
					,[ExecQueryText]
				)
				SELECT
					 MIN(dQ.[rowid])
					,hSI.[rowid]
					,0
					,t.[query_text]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceExecQueries}$_${1}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					LEFT OUTER JOIN [hist].[h_InstanceExecQueryText] hSIEQT ON
						hSIEQT.[h_ServerInstance_id] = hSI.[rowid]
						AND hSIEQT.[ExecQueryText] = t.[query_text]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND t.[query_text] IS NOT NULL
					AND hSIEQT.[rowid] IS NULL
				GROUP BY
					 hSI.[rowid]
					,t.[query_text]
				;
			</sqlite_statement>
			<sqlite_statement id="51">
				INSERT INTO [hist].[h_InstanceExecQuery]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[DatabaseId]
					,[ExecQueryId]
					,[EventDay]
					,[EventTime]
					,[execution_count]
					,[total_worker_time]
					,[total_elapsed_time]
					,[total_logical_reads]
					,[total_logical_writes]
				)
				SELECT
					 MIN(dQ.[rowid])
					,hSI.[rowid]
					,t.[DatabaseId]
					,hSIEQT.[ExecQueryId]
					,MAX(date(t.[EventTime]))
					,MAX(t.[EventTime])
					,MAX(t.[execution_count])
					,MAX(t.[total_worker_time])
					,MAX(t.[total_elapsed_time])
					,MAX(t.[total_logical_reads])
					,MAX(t.[total_logical_writes])
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceExecQueries}$_${1}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					INNER JOIN [hist].[h_InstanceExecQueryText] hSIEQT ON
						hSIEQT.[h_ServerInstance_id] = hSI.[rowid]
						AND hSIEQT.[ExecQueryText] = t.[query_text]
					LEFT OUTER JOIN [hist].[h_InstanceExecQuery] hSIEQ ON
						hSIEQ.[h_ServerInstance_id] = hSI.[rowid]
						AND hSIEQ.[ExecQueryId] = hSIEQT.[ExecQueryId]
						AND hSIEQ.[EventTime] = t.[EventTime]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND hSIEQ.[rowid] IS NULL
				GROUP BY
					 hSI.[rowid]
					,t.[DatabaseId]
					,hSIEQT.[ExecQueryId]
				;
			</sqlite_statement>
		</sqlite_statements>
	</sql-select>
</sqlquery>
</root>
