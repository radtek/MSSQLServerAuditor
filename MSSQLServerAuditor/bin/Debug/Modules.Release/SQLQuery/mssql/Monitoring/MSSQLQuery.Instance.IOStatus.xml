<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetInstanceIOStatus">
		<name>
			get disk I/O pressure
		</name>
		<description>
			Dynamic management function query to view disk I/O pressure
		</description>
		<reference>
			http://msdn.microsoft.com/en-us/library/ms190326.aspx
		</reference>
		<reference>
			http://blogs.msdn.com/b/sql_pfe_blog/archive/2013/04/23/identifying-cause-of-sql-server-io-bottleneck-using-xperf.aspx
		</reference>
		<reference>
			http://blogs.msdn.com/b/askjay/archive/2011/07/08/troubleshooting-slow-disk-i-o-in-sql-server.aspx
		</reference>
		<reference>
			http://sqlblog.com/blogs/louis_davidson/archive/2007/04/06/dynamic-management-function-query-to-view-i-o-pressure.aspx
		</reference>
		<reference>
			http://blogs.msdn.com/b/dpless/archive/2010/12/01/leveraging-sys-dm-io-virtual-file-stats.aspx
		</reference>
		<reference>
			http://BrentOzar.com/go/slow
		</reference>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@tblInstanceIO TABLE
				(
					 [EventTime]            [DATETIME]      NOT NULL
					,[Disk]                 [NVARCHAR](1)   NOT NULL
					,[DatabaseId]           [INTEGER]       NOT NULL
					,[DatabaseName]         [NVARCHAR](128) NOT NULL
					,[num_of_reads]         [FLOAT]         NOT NULL
					,[num_of_bytes_read]    [FLOAT]         NOT NULL
					,[io_stall_read_ms]     [FLOAT]         NOT NULL
					,[num_of_writes]        [FLOAT]         NOT NULL
					,[num_of_bytes_written] [FLOAT]         NOT NULL
					,[io_stall_write_ms]    [FLOAT]         NOT NULL
					,[io_stall]             [FLOAT]         NOT NULL
				);

			INSERT INTO @tblInstanceIO
			(
				 [EventTime]
				,[Disk]
				,[DatabaseId]
				,[DatabaseName]
				,[num_of_reads]
				,[num_of_bytes_read]
				,[io_stall_read_ms]
				,[num_of_writes]
				,[num_of_bytes_written]
				,[io_stall_write_ms]
				,[io_stall]
			)
			SELECT
				 getdate()                                           AS [EventTime]
				,UPPER(SUBSTRING(LTRIM(tSMF.[physical_name]), 1, 1)) AS [Disk]
				,tSD.[database_id]                                   AS [DatabaseId]
				,tSD.[name]                                          AS [DatabaseName]
				,SUM(ISNULL(divfs.[num_of_reads], 0.0))              AS [num_of_reads]
				,SUM(ISNULL(divfs.[num_of_bytes_read], 0.0))         AS [num_of_bytes_read]
				,SUM(ISNULL(divfs.[io_stall_read_ms], 0.0))          AS [io_stall_read_ms]
				,SUM(ISNULL(divfs.[num_of_writes], 0.0))             AS [num_of_writes]
				,SUM(ISNULL(divfs.[num_of_bytes_written], 0.0))      AS [num_of_bytes_written]
				,SUM(ISNULL(divfs.[io_stall_write_ms], 0.0))         AS [io_stall_write_ms]
				,SUM(ISNULL(divfs.[io_stall], 0.0))                  AS [io_stall]
			FROM
				[sys].[dm_io_virtual_file_stats](NULL, NULL) AS divfs
				INNER JOIN [master].[sys].[master_files] tSMF ON
					tSMF.[database_id] = divfs.[database_id]
					AND tSMF.[file_id] = divfs.[file_id]
				INNER JOIN [master].[sys].[databases] tSD ON
					tSD.[database_id] = divfs.[database_id]
			WHERE
				tSMF.[database_id] IS NOT NULL
				AND tSMF.[physical_name] IS NOT NULL
				AND tSD.[database_id] IS NOT NULL
				AND tSD.[name] IS NOT NULL
			GROUP BY
				 UPPER(SUBSTRING(LTRIM(tSMF.[physical_name]), 1, 1))
				,tSD.[database_id]
				,tSD.[name]
			;

			SELECT
				 MAX(t.[EventTime])           AS [EventTime]
				,SUM(t.[num_of_reads])        AS [num_of_reads]
				,SUM(t.[num_of_bytes_read])   AS [num_of_bytes_read]
				,SUM(t.[io_stall_read_ms])    AS [io_stall_read_ms]
				,SUM(t.[num_of_writes])       AS [num_of_writes]
				,SUM(t.[num_of_bytes_written])AS [num_of_bytes_written]
				,SUM(t.[io_stall_write_ms])   AS [io_stall_write_ms]
				,SUM(t.[io_stall])            AS [io_stall]
			FROM
				@tblInstanceIO t
			;

			SELECT
				 MAX(t.[EventTime])           AS [EventTime]
				,t.[Disk]                     AS [Disk]
				,SUM(t.[num_of_reads])        AS [num_of_reads]
				,SUM(t.[num_of_bytes_read])   AS [num_of_bytes_read]
				,SUM(t.[io_stall_read_ms])    AS [io_stall_read_ms]
				,SUM(t.[num_of_writes])       AS [num_of_writes]
				,SUM(t.[num_of_bytes_written])AS [num_of_bytes_written]
				,SUM(t.[io_stall_write_ms])   AS [io_stall_write_ms]
				,SUM(t.[io_stall])            AS [io_stall]
			FROM
				@tblInstanceIO t
			GROUP BY
				t.[Disk]
			;

			SELECT
				 MAX(t.[EventTime])           AS [EventTime]
				,t.[DatabaseId]               AS [DatabaseId]
				,t.[DatabaseName]             AS [DatabaseName]
				,SUM(t.[num_of_reads])        AS [num_of_reads]
				,SUM(t.[num_of_bytes_read])   AS [num_of_bytes_read]
				,SUM(t.[io_stall_read_ms])    AS [io_stall_read_ms]
				,SUM(t.[num_of_writes])       AS [num_of_writes]
				,SUM(t.[num_of_bytes_written])AS [num_of_bytes_written]
				,SUM(t.[io_stall_write_ms])   AS [io_stall_write_ms]
				,SUM(t.[io_stall])            AS [io_stall]
			FROM
				@tblInstanceIO t
			GROUP BY
				 t.[DatabaseId]
				,t.[DatabaseName]
			;
		</sql-select-text>
		<sqlite_statements>
			<sqlite_statement id="13">
				INSERT INTO [hist].[h_ServerInstance]
				(
					 [d_Query_id]
					,[d_ServerInstance_id]
					,[ServerInstanceName]
					,[ConnectionName]
				)
				SELECT
					 MIN(dQ.[rowid])
					,MIN(dQ.[d_ServerInstance_id])
					,dSI.[ServerInstanceName]
					,MIN(IFNULL(dSI.[ConnectionName], ''))
				FROM
					[d_Query] dQ
					INNER JOIN [d_ServerInstance] dSI ON
						dSI.[rowid] = dQ.[d_ServerInstance_id]
					LEFT OUTER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[ServerInstanceName] = dSI.[ServerInstanceName]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND dSI.[ServerInstanceName] IS NOT NULL
					AND hSI.[rowid] IS NULL
				GROUP BY
					dSI.[ServerInstanceName]
				;
			</sqlite_statement>
			<sqlite_statement id="14">
				UPDATE [hist].[h_ServerInstance] SET
					 [d_Query_id] = @d_Query_id
					,[d_ServerInstance_id] = (
						SELECT
							MIN(dQ.[d_ServerInstance_id])
						FROM
							[d_Query] dQ
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dQ.[d_ServerInstance_id] IS NOT NULL
					)
				WHERE
					[ServerInstanceName] = (
						SELECT
							MIN(dSI.[ServerInstanceName])
						FROM
							[d_Query] dQ
							INNER JOIN [d_ServerInstance] dSI ON
								dSI.[rowid] = dQ.[d_ServerInstance_id]
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dSI.[ServerInstanceName] IS NOT NULL
					) AND [d_ServerInstance_id] != (
						SELECT
							MIN(dQ.[d_ServerInstance_id])
						FROM
							[d_Query] dQ
						WHERE
							dQ.[rowid] = @d_Query_id
							AND dQ.[d_ServerInstance_id] IS NOT NULL
					)
				;
			</sqlite_statement>
			<sqlite_statement id="41">
				INSERT INTO [hist].[h_InstanceIOStatus]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[EventDay]
					,[EventTime]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSI.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,CASE
						WHEN (t.[num_of_reads] &gt; hIIOSB.[num_of_reads]) THEN
							CAST((t.[num_of_reads] - hIIOSB.[num_of_reads]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_read] &gt; hIIOSB.[num_of_bytes_read]) THEN
							CAST((t.[num_of_bytes_read] - hIIOSB.[num_of_bytes_read]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_read_ms] &gt; hIIOSB.[io_stall_read_ms]) THEN
							CAST((t.[io_stall_read_ms] - hIIOSB.[io_stall_read_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_writes] &gt; hIIOSB.[num_of_writes]) THEN
							CAST((t.[num_of_writes] - hIIOSB.[num_of_writes]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_written] &gt; hIIOSB.[num_of_bytes_written]) THEN
							CAST((t.[num_of_bytes_written] - hIIOSB.[num_of_bytes_written]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_write_ms] &gt; hIIOSB.[io_stall_write_ms]) THEN
							CAST((t.[io_stall_write_ms] - hIIOSB.[io_stall_write_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall] &gt; hIIOSB.[io_stall]) THEN
							CAST((t.[io_stall] - hIIOSB.[io_stall]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [hist].[h_InstanceIOStatusBaseline] hIIOSB ON
						hIIOSB.[h_ServerInstance_id] = hSI.[rowid]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${1}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					LEFT OUTER JOIN [hist].[h_InstanceIOStatus] hIIOS ON
						hIIOS.[h_ServerInstance_id] = hSI.[rowid]
						AND hIIOS.[EventTime] = t.[EventTime]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND t.[EventTime] &gt; hIIOSB.[EventTime]
					AND hIIOS.[rowid] IS NULL
				;
			</sqlite_statement>
			<sqlite_statement id="42">
				INSERT OR REPLACE INTO [hist].[h_InstanceIOStatusBaseline]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[EventDay]
					,[EventTime]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSI.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,t.[num_of_reads]
					,t.[num_of_bytes_read]
					,t.[io_stall_read_ms]
					,t.[num_of_writes]
					,t.[num_of_bytes_written]
					,t.[io_stall_write_ms]
					,t.[io_stall]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${1}$] t ON
						t.[d_Query_id] = dQ.[rowid]
				WHERE
					dQ.[rowid] = @d_Query_id
				;
			</sqlite_statement>
			<sqlite_statement id="51">
				INSERT INTO [hist].[h_InstanceDiskIOStatus]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[EventDay]
					,[EventTime]
					,[Disk]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSI.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,t.[Disk]
					,CASE
						WHEN (t.[num_of_reads] &gt; hIDIOSB.[num_of_reads]) THEN
							CAST((t.[num_of_reads] - hIDIOSB.[num_of_reads]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_read] &gt; hIDIOSB.[num_of_bytes_read]) THEN
							CAST((t.[num_of_bytes_read] - hIDIOSB.[num_of_bytes_read]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_read_ms] &gt; hIDIOSB.[io_stall_read_ms]) THEN
							CAST((t.[io_stall_read_ms] - hIDIOSB.[io_stall_read_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_writes] &gt; hIDIOSB.[num_of_writes]) THEN
							CAST((t.[num_of_writes] - hIDIOSB.[num_of_writes]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_written] &gt; hIDIOSB.[num_of_bytes_written]) THEN
							CAST((t.[num_of_bytes_written] - hIDIOSB.[num_of_bytes_written]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_write_ms] &gt; hIDIOSB.[io_stall_write_ms]) THEN
							CAST((t.[io_stall_write_ms] - hIDIOSB.[io_stall_write_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall] &gt; hIDIOSB.[io_stall]) THEN
							CAST((t.[io_stall] - hIDIOSB.[io_stall]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${2}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					INNER JOIN [hist].[h_InstanceDiskIOStatusBaseline] hIDIOSB ON
						hIDIOSB.[h_ServerInstance_id] = hSI.[rowid]
						AND hIDIOSB.[Disk] = t.[Disk]
					LEFT OUTER JOIN [hist].[h_InstanceDiskIOStatus] hIDIOS ON
						hIDIOS.[h_ServerInstance_id] = hSI.[rowid]
						AND hIDIOS.[EventTime] = t.[EventTime]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND t.[EventTime] &gt; hIDIOSB.[EventTime]
					AND hIDIOS.[rowid] IS NULL
				;
			</sqlite_statement>
			<sqlite_statement id="52">
				INSERT OR REPLACE INTO [hist].[h_InstanceDiskIOStatusBaseline]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[EventDay]
					,[EventTime]
					,[Disk]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSI.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,t.[Disk]
					,t.[num_of_reads]
					,t.[num_of_bytes_read]
					,t.[io_stall_read_ms]
					,t.[num_of_writes]
					,t.[num_of_bytes_written]
					,t.[io_stall_write_ms]
					,t.[io_stall]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${2}$] t ON
						t.[d_Query_id] = dQ.[rowid]
				WHERE
					dQ.[rowid] = @d_Query_id
				;
			</sqlite_statement>
			<sqlite_statement id="61">
				INSERT INTO [hist].[h_ServerInstanceDatabase]
				(
					 [d_Query_id]
					,[h_ServerInstance_id]
					,[DatabaseId]
					,[DatabaseName]
				)
				SELECT
					 dQ.[rowid]
					,hSI.[rowid]
					,t.[DatabaseId]
					,t.[DatabaseName]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${3}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					LEFT OUTER JOIN [hist].[h_ServerInstanceDatabase] hSID ON
						hSID.[h_ServerInstance_id] = hSI.[rowid]
						AND hSID.[DatabaseId] = t.[DatabaseId]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND hSID.[rowid] IS NULL
				;
			</sqlite_statement>
			<sqlite_statement id="62">
				INSERT INTO [hist].[h_InstanceDatabaseIOStatus]
				(
					 [d_Query_id]
					,[h_ServerInstanceDatabase_id]
					,[EventDay]
					,[EventTime]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSID.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,CASE
						WHEN (t.[num_of_reads] &gt; hIDIOSB.[num_of_reads]) THEN
							CAST((t.[num_of_reads] - hIDIOSB.[num_of_reads]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_read] &gt; hIDIOSB.[num_of_bytes_read]) THEN
							CAST((t.[num_of_bytes_read] - hIDIOSB.[num_of_bytes_read]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_read_ms] &gt; hIDIOSB.[io_stall_read_ms]) THEN
							CAST((t.[io_stall_read_ms] - hIDIOSB.[io_stall_read_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_writes] &gt; hIDIOSB.[num_of_writes]) THEN
							CAST((t.[num_of_writes] - hIDIOSB.[num_of_writes]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[num_of_bytes_written] &gt; hIDIOSB.[num_of_bytes_written]) THEN
							CAST((t.[num_of_bytes_written] - hIDIOSB.[num_of_bytes_written]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall_write_ms] &gt; hIDIOSB.[io_stall_write_ms]) THEN
							CAST((t.[io_stall_write_ms] - hIDIOSB.[io_stall_write_ms]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
					,CASE
						WHEN (t.[io_stall] &gt; hIDIOSB.[io_stall]) THEN
							CAST((t.[io_stall] - hIDIOSB.[io_stall]) AS [REAL]) / CAST((strftime('%s', t.[EventTime]) - strftime('%s', hIDIOSB.[EventTime])) AS [REAL])
						ELSE
							0.0
					END
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${3}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					INNER JOIN [hist].[h_ServerInstanceDatabase] hSID ON
						hSID.[h_ServerInstance_id] = hSI.[rowid]
						AND hSID.[DatabaseId] = t.[DatabaseId]
					INNER JOIN [hist].[h_InstanceDatabaseIOStatusBaseline] hIDIOSB ON
						hIDIOSB.[h_ServerInstanceDatabase_id] = hSID.[rowid]
					LEFT OUTER JOIN [hist].[h_InstanceDatabaseIOStatus] hIDIOS ON
						hIDIOS.[h_ServerInstanceDatabase_id] = hSID.[rowid]
						AND hIDIOS.[EventTime] = t.[EventTime]
				WHERE
					dQ.[rowid] = @d_Query_id
					AND t.[EventTime] &gt; hIDIOSB.[EventTime]
					AND hIDIOS.[rowid] IS NULL
				;
			</sqlite_statement>
			<sqlite_statement id="63">
				INSERT OR REPLACE INTO [hist].[h_InstanceDatabaseIOStatusBaseline]
				(
					 [d_Query_id]
					,[h_ServerInstanceDatabase_id]
					,[EventDay]
					,[EventTime]
					,[num_of_reads]
					,[num_of_bytes_read]
					,[io_stall_read_ms]
					,[num_of_writes]
					,[num_of_bytes_written]
					,[io_stall_write_ms]
					,[io_stall]
				)
				SELECT
					 dQ.[rowid]
					,hSID.[rowid]
					,date(t.[EventTime])
					,t.[EventTime]
					,t.[num_of_reads]
					,t.[num_of_bytes_read]
					,t.[io_stall_read_ms]
					,t.[num_of_writes]
					,t.[num_of_bytes_written]
					,t.[io_stall_write_ms]
					,t.[io_stall]
				FROM
					[d_Query] dQ
					INNER JOIN [hist].[h_ServerInstance] hSI ON
						hSI.[d_ServerInstance_id] = dQ.[d_ServerInstance_id]
					INNER JOIN [report].[${GetInstanceIOStatus}$_${3}$] t ON
						t.[d_Query_id] = dQ.[rowid]
					INNER JOIN [hist].[h_ServerInstanceDatabase] hSID ON
						hSID.[h_ServerInstance_id] = hSI.[rowid]
						AND hSID.[DatabaseId] = t.[DatabaseId]
				WHERE
					dQ.[rowid] = @d_Query_id
				;
			</sqlite_statement>
		</sqlite_statements>
	</sql-select>
</sqlquery>
</root>
