<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetErrorLogNumbersList">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			CREATE TABLE #tblErrorLogList
			(
				 [intErrorLogNumber]          [INTEGER]
				,[ErrorLogDateTime]           [DATETIME]
				,[intErrorLogFileSizeInBytes] [BIGINT]
			);

			INSERT INTO #tblErrorLogList
			(
				 [intErrorLogNumber]
				,[ErrorLogDateTime]
				,[intErrorLogFileSizeInBytes]
			)
				EXEC [master].[dbo].[sp_enumerrorlogs];

			SELECT
				CASE
					WHEN (t.[intErrorLogNumber] = 0) THEN
						N'Current'
					ELSE
						N'Archive #' + CONVERT([NVARCHAR](128), t.[intErrorLogNumber])
				END + N' - ' + CONVERT([NVARCHAR](128), MIN(t.[ErrorLogDateTime])) AS [NodeUName]
				,t.[intErrorLogNumber]                                             AS [NodeUId]
				,1                                                                 AS [NodeEnabled]
				,N'NodeIcon'                                                       AS [NodeUIcon]
				,N'#080808'                                                        AS [NodeFontColor]
				,N'normal'                                                         AS [NodeFontStyle]
				,t.[intErrorLogNumber]                                             AS [intLogNumber]
			FROM
				#tblErrorLogList t
			GROUP BY
				t.[intErrorLogNumber]
			ORDER BY
				t.[intErrorLogNumber] ASC;
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			CREATE TABLE #tblErrorLogList
			(
				 [intErrorLogNumber]          [INTEGER]
				,[ErrorLogDateTime]           [DATETIME]
				,[intErrorLogFileSizeInBytes] [BIGINT]
			);

			INSERT INTO #tblErrorLogList
			(
				 [intErrorLogNumber]
				,[ErrorLogDateTime]
				,[intErrorLogFileSizeInBytes]
			)
				EXEC [master].[dbo].[sp_enumerrorlogs];

			SELECT
				CASE
					WHEN (t.[intErrorLogNumber] = 0) THEN
						N'Current'
					ELSE
						N'Archive #' + CONVERT([NVARCHAR](128), t.[intErrorLogNumber])
				END + N' - ' + CONVERT([NVARCHAR](128), MIN(t.[ErrorLogDateTime])) AS [NodeUName]
				,t.[intErrorLogNumber]                                             AS [NodeUId]
				,1                                                                 AS [NodeEnabled]
				,N'NodeIcon'                                                       AS [NodeUIcon]
				,N'#080808'                                                        AS [NodeFontColor]
				,N'normal'                                                         AS [NodeFontStyle]
				,t.[intErrorLogNumber]                                             AS [intLogNumber]
			FROM
				#tblErrorLogList t
			GROUP BY
				t.[intErrorLogNumber]
			ORDER BY
				t.[intErrorLogNumber] ASC;
		</sql-select-text>
	</sql-select>
	<sql-select name="GetErrorLogProcessesList">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@intMyLogNumber [INTEGER]
			;

			SET @intMyLogNumber = ISNULL(@intLogNumber, 0);

			CREATE TABLE #tblErrorLog
			(
				 [strErrorLog]        [NVARCHAR](4000)
				,[intContinuationRow] [INTEGER]
			);

			IF (@intMyLogNumber = 0)
			BEGIN
				INSERT INTO #tblErrorLog
				(
					 [strErrorLog]
					,[intContinuationRow]
				)
					EXEC [master].[dbo].[sp_readerrorlog];
			END
			ELSE
			BEGIN
				INSERT INTO #tblErrorLog
				(
					 [strErrorLog]
					,[intContinuationRow]
				)
					EXEC [master].[dbo].[sp_readerrorlog] @intMyLogNumber;
			END

			SELECT
				 t1.[LogMessageProcessInfo] AS [NodeUName]
				,t1.[LogMessageProcessInfo] AS [NodeUId]
				,1                          AS [NodeEnabled]
				,N'NodeIcon'                AS [NodeUIcon]
				,N'#080808'                 AS [NodeFontColor]
				,N'normal'                  AS [NodeFontStyle]
				,@intLogNumber              AS [intLogNumber]
				,t1.[LogMessageProcessInfo] AS [LogMessageProcessInfo]
			FROM (
				SELECT
					CASE
						WHEN (CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))) &gt; 0) THEN
							SUBSTRING(LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog]))), 0, CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))))
						ELSE
							NULL
					END AS [LogMessageProcessInfo]
				FROM
					#tblErrorLog t
				WHERE
					ISDATE(SUBSTRING(t.[strErrorLog], 1, 10) + N' ' + SUBSTRING(t.[strErrorLog], 12, 11)) = 1
					AND (
							 t.[strErrorLog] LIKE N'%failed%'
						OR t.[strErrorLog] LIKE N'%error%'
						OR t.[strErrorLog] LIKE N'%Invalid checksum%'
						OR t.[strErrorLog] LIKE N'%memory pressure%'
					)
					AND (
						t.[strErrorLog] NOT LIKE N'%found 0 errors and repaired 0 errors%'
					)
					AND (
						t.[strErrorLog] NOT LIKE N'%Login failed for user ''(null)''%'
					)
					AND (
						t.[strErrorLog] NOT LIKE N'%without errors%'
					)
				) t1
			WHERE
				t1.[LogMessageProcessInfo] IS NOT NULL
			GROUP BY
				t1.[LogMessageProcessInfo]
			ORDER BY
				t1.[LogMessageProcessInfo]
			;
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@intMyLogNumber [INTEGER]
			;

			SET @intMyLogNumber = ISNULL(@intLogNumber, 0);

			CREATE TABLE #tblErrorLog
			(
				 [LogDate]     [DATETIME]
				,[ProcessInfo] [NVARCHAR](4000)
				,[Text]        [NVARCHAR](4000)
			);

			INSERT INTO #tblErrorLog
			(
				 [LogDate]
				,[ProcessInfo]
				,[Text]
			)
				EXEC [master].[sys].[xp_ReadErrorLog] @intMyLogNumber, 1;

			SELECT
				 t.[ProcessInfo] AS [NodeUName]
				,t.[ProcessInfo] AS [NodeUId]
				,1               AS [NodeEnabled]
				,N'NodeIcon'     AS [NodeUIcon]
				,N'#080808'      AS [NodeFontColor]
				,N'normal'       AS [NodeFontStyle]
				,@intLogNumber   AS [intLogNumber]
				,t.[ProcessInfo] AS [LogMessageProcessInfo]
			FROM
				#tblErrorLog t
			WHERE
				t.[ProcessInfo] IS NOT NULL
				AND (
					   t.[Text] LIKE N'%failed%'
					OR t.[Text] LIKE N'%error%'
					OR t.[Text] LIKE N'%Invalid checksum%'
					OR t.[Text] LIKE N'%memory pressure%'
				)
				AND (
					t.[Text] NOT LIKE N'%found 0 errors and repaired 0 errors%'
				)
				AND (
					t.[Text] NOT LIKE N'%Login failed for user ''(null)''%'
				)
				AND (
					t.[Text] NOT LIKE N'%without errors%'
				)
			GROUP BY
				t.[ProcessInfo]
			ORDER BY
				t.[ProcessInfo]
			;
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@intLogNumber" type="Int" />
		</sql-select-parameters>
	</sql-select>

	<sql-select name="GetErrorLogInfo">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@intMyLogNumber [INTEGER]
			;

			SET @intMyLogNumber = ISNULL(@intLogNumber, 0);

			CREATE TABLE #tblErrorLog
			(
				 [strErrorLog]        [NVARCHAR](4000)
				,[intContinuationRow] [INTEGER]
			);

			IF (@intMyLogNumber = 0)
			BEGIN
				INSERT INTO #tblErrorLog
				(
					 [strErrorLog]
					,[intContinuationRow]
				)
					EXEC [master].[dbo].[sp_readerrorlog];
			END
			ELSE
			BEGIN
				INSERT INTO #tblErrorLog
				(
					 [strErrorLog]
					,[intContinuationRow]
				)
					EXEC [master].[dbo].[sp_readerrorlog] @intMyLogNumber;
			END

			SELECT TOP 1000
				CONVERT([DATETIME],
					SUBSTRING(t.[strErrorLog], 1, 10)
					+ N' '
					+ SUBSTRING(t.[strErrorLog], 12, 11)
					,121
				)                                                                   AS [LogMessageDateTime]
				,CASE
					WHEN (CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))) &gt; 0) THEN
						SUBSTRING(LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog]))), 0, CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))))
					ELSE
						NULL
				END                                                                 AS [LogMessageProcessInfo]
				,CASE
					WHEN (CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))) &gt; 0) THEN
						LTRIM(SUBSTRING(t.[strErrorLog], 24 + CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog])))), LEN(t.[strErrorLog])))
					ELSE
						NULL
				END                                                                 AS [LogMessageText]
			FROM
				#tblErrorLog t
			WHERE
				SUBSTRING(LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog]))), 0, CHARINDEX(N' ', LTRIM(SUBSTRING(t.[strErrorLog], 24, LEN(t.[strErrorLog]))))) = ISNULL(@LogMessageProcessInfo, N'?')
				AND ISDATE(SUBSTRING(t.[strErrorLog], 1, 10) + N' ' + SUBSTRING(t.[strErrorLog], 12, 11)) = 1
				AND (
					   t.[strErrorLog] LIKE N'%failed%'
					OR t.[strErrorLog] LIKE N'%error%'
					OR t.[strErrorLog] LIKE N'%Invalid checksum%'
					OR t.[strErrorLog] LIKE N'%memory pressure%'
				)
				AND (
					t.[strErrorLog] NOT LIKE N'%found 0 errors and repaired 0 errors%'
				)
				AND (
					t.[strErrorLog] NOT LIKE N'%Login failed for user ''(null)''%'
				)
				AND (
					t.[strErrorLog] NOT LIKE N'%without errors%'
				)
			ORDER BY
				t.[strErrorLog] DESC;
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@intMyLogNumber [INTEGER]
			;

			SET @intMyLogNumber = ISNULL(@intLogNumber, 0);

			CREATE TABLE #tblErrorLog
			(
				 [LogDate]     [DATETIME]
				,[ProcessInfo] [NVARCHAR](4000)
				,[Text]        [NVARCHAR](4000)
			);

			INSERT INTO #tblErrorLog
			(
				 [LogDate]
				,[ProcessInfo]
				,[Text]
			)
				EXEC [master].[sys].[xp_ReadErrorLog] @intMyLogNumber, 1;

			SELECT TOP 1000
				 t.[LogDate]            AS [LogMessageDateTime]
				,t.[ProcessInfo]        AS [LogMessageProcessInfo]
				,LTRIM(RTRIM(t.[Text])) AS [LogMessageText]
			FROM
				#tblErrorLog t
			WHERE
				t.[ProcessInfo] = ISNULL(@LogMessageProcessInfo, N'?')
				AND (
					   t.[Text] LIKE N'%failed%'
					OR t.[Text] LIKE N'%error%'
					OR t.[Text] LIKE N'%Invalid checksum%'
					OR t.[Text] LIKE N'%memory pressure%'
				)
				AND (
					t.[Text] NOT LIKE N'%found 0 errors and repaired 0 errors%'
				)
				AND (
					t.[Text] NOT LIKE N'%Login failed for user ''(null)''%'
				)
				AND (
					t.[Text] NOT LIKE N'%without errors%'
				)
			ORDER BY
				t.[LogDate] DESC;
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@intLogNumber" type="Int" />
			<sql-select-parameter name="@LogMessageProcessInfo" type="NChar" />
		</sql-select-parameters>
	</sql-select>
</sqlquery>
</root>
