<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<sqlquery type="MSSQL">
	<sql-select name="GetLastDatabaseRestore">
		<sql-select-text MinSupportedVersion="8.*" MaxSupportedVersion="8.*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@tblRestoreResults TABLE
				(
					 [DatabaseName]             [NVARCHAR](128)
					,[DatabaseStatus]           [NVARCHAR](128)
					,[DatabaseIsInStandby]      [BIT]
					,[DatabaseRestoreType]      [NCHAR](1)
					,[DatabaseRestoredDateTime] [DATETIME]
					,[DatabaseRestoredStatus]   [INTEGER]
					,[SourceServerName]         [NVARCHAR](128)
					,[SourceDatabaseName]       [NVARCHAR](128)
					,[SourceBackupFinishDate]   [DATETIME]
					,[SourceBackupSizeMB]       [FLOAT]
					,[SourceBackupFileName]     [NVARCHAR](512)
				);

			INSERT INTO @tblRestoreResults
			(
				 [DatabaseName]
				,[DatabaseStatus]
				,[DatabaseIsInStandby]
				,[DatabaseRestoreType]
				,[DatabaseRestoredDateTime]
				,[DatabaseRestoredStatus]
				,[SourceServerName]
				,[SourceDatabaseName]
				,[SourceBackupFinishDate]
				,[SourceBackupSizeMB]
				,[SourceBackupFileName]
			)
			SELECT
				 tSD.[name]                                                          AS [DatabaseName]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Status')) AS [DatabaseStatus]
				,CONVERT([BIT], DatabasePropertyEx(tSD.[name], N'IsInStandBy'))      AS [DatabaseIsInStandby]
				,tDR.[restore_type]                                                  AS [DatabaseRestoreType]
				,tDR.[restore_date]                                                  AS [DatabaseRestoredDateTime]
				,CASE
					WHEN ((DatabasePropertyEx(tSD.[name], N'IsInStandBy') = 1) AND (ISNULL(tDR.[restore_type], N'_') = N'L')) THEN
						CASE
							WHEN (tDR.[restore_date] IS NULL) THEN
								1
							WHEN (ISNULL(tDR.[restore_date], N'19000101') &lt; DATEADD(d, -1, GETDATE())) THEN
								1
							ELSE
								0
						END
					ELSE
						0
				END                                                                  AS [DatabaseRestoredStatus]
				,tDR.[source_server_name]                                            AS [SourceServerName]
				,tDR.[source_database_name]                                          AS [SourceDatabaseName]
				,tDR.[source_backup_finish_date]                                     AS [SourceBackupFinishDate]
				,CASE
					WHEN (tDR.[source_backup_size] IS NULL) THEN
						NULL
					ELSE
						tDR.[source_backup_size] / (1024.0 * 1024.0)
				END                                                                  AS [SourceBackupSizeMB]
				,tDR.[physical_device_name]                                          AS [SourceBackupFileName]
			FROM
				[master].[dbo].[sysdatabases] tSD
				INNER JOIN (
					SELECT
						 rsh.[destination_database_name] AS [destination_database_name]
						,rsh.[restore_type]              AS [restore_type]
						,rsh.[restore_date]              AS [restore_date]
						,bs.[server_name]                AS [source_server_name]
						,bs.[database_name]              AS [source_database_name]
						,bs.[backup_finish_date]         AS [source_backup_finish_date]
						,bs.[backup_size]                AS [source_backup_size]
						,MIN(bmf.[physical_device_name]) AS [physical_device_name]
						,COUNT(*)                        AS [physical_device_count]
					FROM
						[msdb].[dbo].[restorehistory] rsh
						INNER JOIN [msdb].[dbo].[backupset] bs ON
							bs.[backup_set_id] = rsh.[backup_set_id]
						INNER JOIN [msdb].[dbo].[backupmediafamily] bmf ON
							bmf.[media_set_id] = bs.[media_set_id]
						INNER JOIN (
							SELECT
								 tRH.[destination_database_name] AS [destination_database_name]
								,tRH.[restore_type]              AS [restore_type]
								,MAX(tRH.[restore_date])         AS [restore_date]
							FROM
								[msdb].[dbo].[restorehistory] tRH
							WHERE
								tRH.[restore_type] = ISNULL(@chRestoreType, tRH.[restore_type])
								AND tRH.[restore_date] IS NOT NULL
							GROUP BY
								 tRH.[destination_database_name]
								,tRH.[restore_type]
						) tRHMax ON
							tRHMax.[destination_database_name] = rsh.[destination_database_name]
							AND tRHMax.[restore_type] = rsh.[restore_type]
							AND tRHMax.[restore_date] = rsh.[restore_date]
					GROUP BY
						 rsh.[destination_database_name]
						,rsh.[restore_type]
						,rsh.[restore_date]
						,bs.[server_name]
						,bs.[database_name]
						,bs.[backup_finish_date]
						,bs.[backup_size]
				) tDR ON
					tDR.[destination_database_name] = tSD.[name]
			WHERE
				tSD.[name] NOT IN (
					 N'tempdb'
					,N'master'
				);

			SELECT
				 t.[DatabaseName]
				,t.[DatabaseStatus]
				,t.[DatabaseIsInStandby]
				,t.[DatabaseRestoreType]
				,t.[DatabaseRestoredDateTime]
				,t.[DatabaseRestoredStatus]
				,t.[SourceServerName]
				,t.[SourceDatabaseName]
				,t.[SourceBackupFinishDate]
				,t.[SourceBackupSizeMB]
				,t.[SourceBackupFileName]
			FROM
				@tblRestoreResults t
			WHERE
				ISNULL(@isShowRestoreIssuesOnly, 0) = 0
				OR (
					ISNULL(@isShowRestoreIssuesOnly, 0) = 1
					AND t.[DatabaseStatus] NOT IN (
						N'OFFLINE'
					)
					AND (
						t.[DatabaseRestoredStatus] NOT IN (0)
					)
				)
			ORDER BY
				 t.[DatabaseName]
				,t.[DatabaseRestoreType];
		</sql-select-text>
		<sql-select-text MinSupportedVersion="9.*" MaxSupportedVersion="*" signature="">
			SET NOCOUNT ON;
			SET DEADLOCK_PRIORITY LOW;

			DECLARE
				@tblRestoreResults TABLE
				(
					 [DatabaseName]             [NVARCHAR](128)
					,[DatabaseStatus]           [NVARCHAR](128)
					,[DatabaseIsInStandby]      [BIT]
					,[DatabaseRestoreType]      [NCHAR](1)
					,[DatabaseRestoredDateTime] [DATETIME]
					,[DatabaseRestoredStatus]   [INTEGER]
					,[SourceServerName]         [NVARCHAR](128)
					,[SourceDatabaseName]       [NVARCHAR](128)
					,[SourceBackupFinishDate]   [DATETIME]
					,[SourceBackupSizeMB]       [FLOAT]
					,[SourceBackupFileName]     [NVARCHAR](512)
				);

			INSERT INTO @tblRestoreResults
			(
				 [DatabaseName]
				,[DatabaseStatus]
				,[DatabaseIsInStandby]
				,[DatabaseRestoreType]
				,[DatabaseRestoredDateTime]
				,[DatabaseRestoredStatus]
				,[SourceServerName]
				,[SourceDatabaseName]
				,[SourceBackupFinishDate]
				,[SourceBackupSizeMB]
				,[SourceBackupFileName]
			)
			SELECT
				 tSD.[name]                                                          AS [DatabaseName]
				,CONVERT([NVARCHAR](128), DatabasePropertyEx(tSD.[name], N'Status')) AS [DatabaseStatus]
				,CONVERT([BIT], DatabasePropertyEx(tSD.[name], N'IsInStandBy'))      AS [DatabaseIsInStandby]
				,tDR.[restore_type]                                                  AS [DatabaseRestoreType]
				,tDR.[restore_date]                                                  AS [DatabaseRestoredDateTime]
				,CASE
					WHEN ((DatabasePropertyEx(tSD.[name], N'IsInStandBy') = 1) AND (ISNULL(tDR.[restore_type], N'_') = N'L')) THEN
						CASE
							WHEN (tDR.[restore_date] IS NULL) THEN
								1
							WHEN (ISNULL(tDR.[restore_date], N'19000101') &lt; DATEADD(d, -1, GETDATE())) THEN
								1
							ELSE
								0
						END
					ELSE
						0
				END                                                                  AS [DatabaseRestoredStatus]
				,tDR.[source_server_name]                                            AS [SourceServerName]
				,tDR.[source_database_name]                                          AS [SourceDatabaseName]
				,tDR.[source_backup_finish_date]                                     AS [SourceBackupFinishDate]
				,CASE
					WHEN (tDR.[source_backup_size] IS NULL) THEN
						NULL
					ELSE
						CONVERT([FLOAT], tDR.[source_backup_size]) / (1024.0 * 1024.0)
				END                                                                  AS [SourceBackupSizeMB]
				,tDR.[physical_device_name]                                          AS [SourceBackupFileName]
			FROM
				[master].[sys].[sysdatabases] tSD
				INNER JOIN (
					SELECT
						 rsh.[destination_database_name] AS [destination_database_name]
						,rsh.[restore_type]              AS [restore_type]
						,rsh.[restore_date]              AS [restore_date]
						,bs.[server_name]                AS [source_server_name]
						,bs.[database_name]              AS [source_database_name]
						,bs.[backup_finish_date]         AS [source_backup_finish_date]
						,bs.[backup_size]                AS [source_backup_size]
						,MIN(bmf.[physical_device_name]) AS [physical_device_name]
						,COUNT(*)                        AS [physical_device_count]
					FROM
						[msdb].[dbo].[restorehistory] rsh
						INNER JOIN [msdb].[dbo].[backupset] bs ON
							bs.[backup_set_id] = rsh.[backup_set_id]
						INNER JOIN [msdb].[dbo].[backupmediafamily] bmf ON
							bmf.[media_set_id] = bs.[media_set_id]
						INNER JOIN (
							SELECT
								 tRH.[destination_database_name] AS [destination_database_name]
								,tRH.[restore_type]              AS [restore_type]
								,MAX(tRH.[restore_date])         AS [restore_date]
							FROM
								[msdb].[dbo].[restorehistory] tRH
							WHERE
								tRH.[restore_type] = ISNULL(@chRestoreType, tRH.[restore_type])
								AND tRH.[restore_date] IS NOT NULL
							GROUP BY
								 tRH.[destination_database_name]
								,tRH.[restore_type]
						) tRHMax ON
							tRHMax.[destination_database_name] = rsh.[destination_database_name]
							AND tRHMax.[restore_type] = rsh.[restore_type]
							AND tRHMax.[restore_date] = rsh.[restore_date]
					GROUP BY
						 rsh.[destination_database_name]
						,rsh.[restore_type]
						,rsh.[restore_date]
						,bs.[server_name]
						,bs.[database_name]
						,bs.[backup_finish_date]
						,bs.[backup_size]
				) tDR ON
					tDR.[destination_database_name] = tSD.[name]
			WHERE
				tSD.[name] NOT IN (
					 N'tempdb'
					,N'master'
				);

			SELECT
				 t.[DatabaseName]
				,t.[DatabaseStatus]
				,t.[DatabaseIsInStandby]
				,t.[DatabaseRestoreType]
				,t.[DatabaseRestoredDateTime]
				,t.[DatabaseRestoredStatus]
				,t.[SourceServerName]
				,t.[SourceDatabaseName]
				,t.[SourceBackupFinishDate]
				,t.[SourceBackupSizeMB]
				,t.[SourceBackupFileName]
			FROM
				@tblRestoreResults t
			WHERE
				ISNULL(@isShowRestoreIssuesOnly, 0) = 0
				OR (
					ISNULL(@isShowRestoreIssuesOnly, 0) = 1
					AND t.[DatabaseStatus] NOT IN (
						N'OFFLINE'
					)
					AND (
						t.[DatabaseRestoredStatus] NOT IN (0)
					)
				)
			ORDER BY
				 t.[DatabaseName]
				,t.[DatabaseRestoreType];
		</sql-select-text>
		<sql-select-parameters>
			<sql-select-parameter name="@chRestoreType" type="NChar" />
			<sql-select-parameter name="@isShowRestoreIssuesOnly" type="Bit" />
		</sql-select-parameters>
	</sql-select>
</sqlquery>
</root>

