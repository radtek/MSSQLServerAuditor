using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Xml.Serialization;
using MSSQLServerAuditor.Utils;
using MSSQLServerAuditor.SQLite.Common.Definitions;

namespace MSSQLServerAuditor.Model
{
	/// <summary>
	/// Information for normalize queries results to SQLite tables
	/// </summary>
	public class NormalizeInfo
	{
		private string                   _tableName;
		private string                   _queryName;
		private string                   _tableIndexFields;
		private Int64                    _recordSet;
		private List<NormalizeInfo>      _childDirectories;
		private List<NormalizeFieldInfo> _fields;
		private bool                     _isAutoGenerated = false;

		/// <summary>
		/// Table name
		/// </summary>
		[XmlAttribute(AttributeName = "table")]
		public string TableName
		{
			get { return this._tableName; }
			set { this._tableName = value.AsValidSqlName(); }
		}

		/// <summary>
		/// Table index fields, eg "id, name"
		/// </summary>
		[XmlAttribute(AttributeName = "index_fields")]
		public string TableIndexFileds
		{
			get { return this._tableIndexFields; }
			set { this._tableIndexFields = value; }
		}

		/// <summary>
		/// Query name
		/// </summary>
		public string QueryName
		{
			get { return this._queryName; }
			set { this._queryName = value.AsValidSqlName(); }
		}

		/// <summary>
		/// List of inner normalize infos
		/// </summary>
		[XmlElement(ElementName = "inner")]
		public List<NormalizeInfo> ChildDirectories
		{
			get { return this._childDirectories; }
			set { this._childDirectories = value; }
		}

		/// <summary>
		/// Fields at this level
		/// </summary>
		[XmlElement(ElementName = "field")]
		public List<NormalizeFieldInfo> Fields
		{
			get { return this._fields; }
			set { this._fields = value; }
		}

		/// <summary>
		/// Record set identifier
		/// </summary>
		[XmlAttribute(AttributeName = "recordSet")]
		public Int64 RecordSet
		{
			get { return this._recordSet; }
			set { this._recordSet = value; }
		}

		/// <summary>
		/// Is normalization info auto-generated
		/// </summary>
		public bool IsAutoGenerated
		{
			get { return this._isAutoGenerated; }
			set { this._isAutoGenerated = value; }
		}

		internal TableDefinition GetTableDefinition()
		{
			TableDefinition tableDefinition = new TableDefinition(TableName);

			foreach (NormalizeFieldInfo field in Fields)
			{
				tableDefinition.AddField(new FieldDefinition(field.Name, field.Type, field.IsUnique, field.IsNotNull));
			}

			foreach (NormalizeInfo childDirectory in ChildDirectories)
			{
				tableDefinition.AddField(new FieldDefinition(childDirectory.GetAsFk(), SqlDbType.BigInt, true, false));
			}

			if (!string.IsNullOrEmpty(this._tableIndexFields))
			{
				string[] tableIndexFieldsList = this._tableIndexFields.Split(',')
					.Select(x => x.Trim())
					.Where(x => !string.IsNullOrWhiteSpace(x))
					.ToArray();

				tableDefinition.Indexes.Add(
					new IndexDefinition(
						tableDefinition,
						"idx_" + this.TableName + "_config_fields",
						false,
						tableIndexFieldsList
					)
				);
			}

			return tableDefinition;
		}

		/// <summary>
		/// Construct name as FK
		/// </summary>
		/// <returns></returns>
		public string GetAsFk()
		{
			return TableName + "_id";
		}

		/// <summary>
		/// Construct select query to read data
		/// </summary>
		/// <param name="additionalClause"></param>
		/// <returns></returns>
		public string GetSelectQuery(string additionalClause, bool readServiceColumns = false)
		{
			List<string> tables         = new List<string>();
			List<string> fields         = new List<string>();
			List<string> joins          = new List<string>();
			string       strSelectQuery = string.Empty;

			if (additionalClause != null)
			{
				joins.Add(additionalClause);
			}

			FillFields(fields, joins, tables);

			if (readServiceColumns)
			{
				strSelectQuery = string.Format(
					@"SELECT * FROM {0} WHERE {1}",
					tables.Join(","),
					joins.Join(" AND ")
				);
			}
			else
			{
				strSelectQuery = string.Format(
					@"SELECT {0} FROM {1} WHERE {2}",
					fields.Any() ? fields.Join(",") : "*",
					tables.Join(","),
					joins.Join(" AND ")
				);
			}

			return strSelectQuery;
		}

		void FillFields(List<string> fields, List<string> joins, List<string> tables)
		{
			tables.Add(TableName.AsDbName());

			foreach (var f in Fields)
			{
				fields.Add(f.Name.AsDbName());
			}

			if (this._childDirectories != null)
			{
				foreach (NormalizeInfo childDirectory in this._childDirectories)
				{
					joins.Add(string.Format(
						"{0} = {1}.{2}",
						childDirectory.GetAsFk(),
						childDirectory.TableName.AsDbName(),
						"rowid"
					));

					childDirectory.FillFields(fields, joins, tables);
				}
			}
		}

		/// <summary>
		/// Get a deep copy of data
		/// </summary>
		/// <returns></returns>
		public NormalizeInfo Clone()
		{
			NormalizeInfo result = (NormalizeInfo)MemberwiseClone();

			result.Fields           = new List<NormalizeFieldInfo>(Fields.Count);
			result.ChildDirectories = new List<NormalizeInfo>(ChildDirectories.Count);

			foreach (NormalizeInfo childDirectory in ChildDirectories)
			{
				result.ChildDirectories.Add(childDirectory.Clone());
			}

			foreach (NormalizeFieldInfo field in Fields)
			{
				result.Fields.Add(field.Clone());
			}

			return result;
		}
	}

	/// <summary>
	/// Fields information for normalization
	/// </summary>
	public class NormalizeFieldInfo
	{
		private string    _name;
		private bool      _isUnique;
		private bool      _isNotNull;
		private SqlDbType _type;

		/// <summary>
		/// Field name
		/// </summary>
		[XmlAttribute(AttributeName = "name")]
		public string Name
		{
			get { return this._name; }

			set
			{
				if (value != "*")
				{
					this._name = value.DeleteSpecChars();
				}
				else
				{
					this._name = value;
				}
			}
		}

		/// <summary>
		/// Parameter type <see href="http://msdn.microsoft.com/en-us/library/system.data.sqldbtype.aspx"></see>
		/// </summary>
		[XmlAttribute(AttributeName = "type")]
		public SqlDbType Type
		{
			get { return this._type; }
			set { this._type = value; }
		}

		/// <summary>
		/// Is field unique
		/// </summary>
		[XmlAttribute(AttributeName = "unique")]
		public bool IsUnique
		{
			get { return this._isUnique; }
			set { this._isUnique = value; }
		}

		/// <summary>
		/// Is field is not null
		/// </summary>
		[XmlAttribute(AttributeName = "isnotnull")]
		public bool IsNotNull
		{
			get { return this._isNotNull; }
			set { this._isNotNull = value; }
		}

		/// <summary>
		/// Performs a shallow copy
		/// </summary>
		/// <returns></returns>
		public NormalizeFieldInfo Clone()
		{
			return (NormalizeFieldInfo)MemberwiseClone();
		}
	}
}
