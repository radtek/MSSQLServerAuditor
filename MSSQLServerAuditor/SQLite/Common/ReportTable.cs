using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Linq;
using MSSQLServerAuditor.SQLite.Commands;
using MSSQLServerAuditor.SQLite.Common.Definitions;

namespace MSSQLServerAuditor.SQLite.Common
{
	public class ReportTable : Table
	{
		public ReportTable(
			SQLiteConnection connection,
			TableDefinition  tableDefinition
		) : base(
				connection,
				tableDefinition
			)
		{
		}

		/// <summary>
		/// It's fast and not a thread-safety version of ReplaceRows method.
		/// TODO: remove it after sqlite thread-safety refactoring.
		/// </summary>
		/// <param name="rows"></param>
		/// <returns></returns>
		public Int64 ReplaceRowsTrans(IEnumerable<ITableRow> rows)
		{
			Int64 result = 0L;

			using (OpenCloseConnectionWrapper wrapper = this.Connection.OpenWrapper())
			{
				using (SQLiteTransaction transaction = wrapper.Connection.BeginTransaction())
				{
					ReplaceCommand replaceCommand = new ReplaceCommand(
						wrapper.Connection,
						this.TableDefinition,
						transaction
					);

					foreach (ITableRow row in rows)
					{
						replaceCommand.AddRowForReplacing(row);
					}

					result = replaceCommand.Execute(100);

					transaction.Commit();
				}
			}

			return result;
		}

		public Int64 DeleteRow(Int64 queryId, Int64 sessionId, string rowHash)
		{
			using (OpenCloseConnectionWrapper wrapper = this.Connection.OpenWrapper())
			{
				return ImplementDeleteRow(queryId, sessionId, rowHash, wrapper.Connection);
			}
		}

		public Int64 DeleteRows(Int64 queryId, Int64 sessionId, List<string> rowHashes)
		{
			return BulkOperation(
				rowHashes,
				(transaction, connection, hash) => ImplementDeleteRow(
					queryId,
					sessionId,
					hash,
					connection,
					transaction
				)
			);
		}

		private long ImplementDeleteRow(
			Int64 queryId,
			Int64 sessionId,
			string rowHash,
			SQLiteConnection connection,
			SQLiteTransaction transaction = null
		)
		{
			RowDeleteCommand      deleteCommand = new RowDeleteCommand(this.Connection, this.TableDefinition);
			string                clause        = CommonRowFiller.GetIdentClause();
			List<SQLiteParameter> parameters    = CommonRowFiller.GetIdentParameters(queryId, sessionId);

			SQLiteParameter rowHashParam = new SQLiteParameter("@rowhash", DbType.String)
			{
				Value = rowHash
			};

			clause += " AND [" + CommonRowFiller.RowHashFieldName + "] = @rowhash";

			parameters.Add(rowHashParam);

			deleteCommand.SetCommandConstraints(clause, parameters, transaction);

			return deleteCommand.Execute(100);
		}

		public Int64 UpdateRowOrderByHash(
			Int64  queryId,
			Int64  sessionId,
			string rowHash,
			Int64  rowId
		)
		{
			using (OpenCloseConnectionWrapper wrapper = this.Connection.OpenWrapper())
			{
				// var updateCommand = new RowUpdateByHashCommand(this.Connection, this.TableDefinition);
				// var clause        = CommonRowFiller.GetIdentClause();
				// var parameters    = CommonRowFiller.GetIdentParameters(queryId, sessionId);
				//
				// var rowIdParam = new SQLiteParameter("@rowid", DbType.Int64)
				// {
				//    Value = rowId
				// };
				//
				// var newrowIdParam = new SQLiteParameter("@rowhash", DbType.String)
				// {
				//    Value = rowHash
				// };
				//
				// clause += " and [" + CommonRowFiller.RowHashFieldName + "] = @rowhash";
				// parameters.Add(rowIdParam);
				// parameters.Add(newrowIdParam);
				//
				// updateCommand.SetCommandConstraints(clause, parameters, "[" + CommonRowFiller.RowOrderFieldName + "] = @rowid", false, null);
				//
				// return updateCommand.Execute();

				return ImplementUpdateRowOrderByHash(queryId, sessionId, rowHash, rowId, wrapper.Connection);
			}
		}

		public Int64 UpdateRowsOrderByHash(
			Int64 queryId,
			Int64 sessionId,
			List<RowUpdateOrderInput> rows
		)
		{
			return BulkOperation(
				rows,
				(transaction, connection, row) => ImplementUpdateRowOrderByHash(
					queryId,
					sessionId,
					row.Hash,
					row.Id,
					connection,
					transaction
				)
			);
		}

		public void ClearAutoGeneratedRows(Int64 queryId, Int64 sessionId)
		{
			using (this.Connection.OpenWrapper())
			{
				RowDeleteCommand      deleteCommand = new RowDeleteCommand(this.Connection, this.TableDefinition);
				string                clause        = CommonRowFiller.GetIdentClause();
				List<SQLiteParameter> parameters    = CommonRowFiller.GetIdentParameters(queryId, sessionId);

				deleteCommand.SetCommandConstraints(clause, parameters);

				deleteCommand.Execute(100);
			}
		}

		private long ImplementUpdateRowOrderByHash(
			long              queryId,
			long              sessionId,
			string            rowHash,
			long              rowId,
			SQLiteConnection  connection,
			SQLiteTransaction transaction = null
		)
		{
			RowUpdateByHashCommand updateCommand = new RowUpdateByHashCommand(connection, this.TableDefinition);
			string                 clause        = CommonRowFiller.GetIdentClause();
			List<SQLiteParameter>  parameters    = CommonRowFiller.GetIdentParameters(queryId, sessionId);

			SQLiteParameter rowIdParam = new SQLiteParameter("@rowid", DbType.Int64)
			{
				Value = rowId
			};

			SQLiteParameter rowHashParam = new SQLiteParameter("@rowhash", DbType.String)
			{
				Value = rowHash
			};

			clause += " AND [" + CommonRowFiller.RowHashFieldName + "] = @rowhash";

			parameters.Add(rowIdParam);
			parameters.Add(rowHashParam);

			updateCommand.SetCommandConstraints(
				clause,
				parameters,
				"[" + CommonRowFiller.RowOrderFieldName + "] = @rowid",
				false,
				null,
				transaction
			);

			return updateCommand.Execute(100);
		}

		internal Int64 UpdateRowByHash(
			long queryId,
			long sessionId,
			string hashOld,
			ITableRow dataRow
		)
		{
			using (OpenCloseConnectionWrapper wrapper = this.Connection.OpenWrapper())
			{
				return ImplementUpdateRow(
					queryId,
					sessionId,
					hashOld,
					dataRow,
					wrapper.Connection
				);
			}
		}

		internal Int64 UpdateRowsByHash(
			long queryId,
			long sessionId,
			List<RowUpdateInput> rows
		)
		{
			return BulkOperation(
				rows,
				(transaction, connection, row) => ImplementUpdateRow(
					queryId,
					sessionId,
					row.OldHash,
					row.Row,
					connection,
					transaction
				)
			);
		}

		private Int64 ImplementUpdateRow(
			long queryId,
			long sessionId,
			string hashOld,
			ITableRow dataRow,
			SQLiteConnection connection,
			SQLiteTransaction transaction = null
		)
		{
			RowUpdateByHashCommand updateCommand = new RowUpdateByHashCommand(connection, this.TableDefinition);
			string                 clause        = CommonRowFiller.GetIdentClause();
			List<SQLiteParameter>  parameters    = CommonRowFiller.GetIdentParameters(queryId, sessionId);

			SQLiteParameter rowHashParam = new SQLiteParameter("@rowhashold", DbType.String)
			{
				Value = hashOld
			};

			clause += " AND [" + CommonRowFiller.RowHashFieldName + "] = @rowhashold";

			parameters.Add(rowHashParam);

			updateCommand.SetCommandConstraints(clause, parameters, String.Empty, true, dataRow, transaction);

			return updateCommand.Execute(100);
		}

		private Int64 BulkOperation<T>(
			List<T> values,
			Func<SQLiteTransaction, SQLiteConnection, T, Int64> executeCommandFunc
		) where T : class
		{
			Int64 itemsProcessed = 0L;

			using (OpenCloseConnectionWrapper wrapper = Connection.OpenWrapper())
			{
				using (SQLiteTransaction transaction = wrapper.Connection.BeginTransaction())
				{
					itemsProcessed += values.Sum(val =>
						executeCommandFunc(transaction, wrapper.Connection, val)
					);

					transaction.Commit();
				}
			}

			return itemsProcessed;
		}
	}
}
